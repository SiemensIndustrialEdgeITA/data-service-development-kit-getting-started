[
    {
        "id": "e1beb61bb782119c",
        "type": "subflow",
        "name": "DataService Write",
        "info": "# DataService Write Subflow Node\r\n\r\nSubflow that implements all the APIs needed to Write variables data to **DataService Edge App version >= 1.4.0**.\r\n\r\n**Configuration:**\r\n\r\nBy checking the **Remote IED checkbox** is it possible to configure the address of the IED that runs **DataService version >= 1.4.0** to be connected.\r\nFor connecting to a remote DataService instance, the **login credentials** of the IED to be connect are also needed.\r\nIf the checkbox is **empty** the subflow will try to connect to the local DataService App running on the same IED that runs this node.\r\n\r\n**Input Message:**\r\n\r\nTo write one or more variables, the input message has to be an **Array of Objects** where **variableName** and **values** properties has to be specified fo each variable to write.\r\n\r\nThe property **variablesName** has to be in the format `\"asset_name\".\"variable_name\"`.\r\nFor example, to write a variable called **CH1** in the Asset **MyDevice** use **MyDevice.CH1**.\r\n\r\nThe property **values** is an array of object where each data point **value**, **timestamp** and **qualitycode** properties has to be specified.\r\nThe timestamp property has to be in ISO Format (e.g. `2022-08-11T13:48:34.064Z`).\r\nUse the qualitycode property `192` for writing good data points.\r\n\r\n**Example input:**\r\n\r\n```json\r\n[\r\n  {\r\n    \"variableName\": \"MyDevice.CH1\",\r\n    \"values\": [\r\n      {\r\n        \"qualitycode\": 192,\r\n        \"timestamp\": \"2022-08-11T13:48:34.064Z\",\r\n        \"value\": 114\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"variableName\": \"MyDevice.CH2\",\r\n    \"values\": [\r\n      {\r\n        \"qualitycode\": 192,\r\n        \"timestamp\": \"2022-08-11T13:48:34.064Z\",\r\n        \"value\": 100\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n**Output:**\r\n\r\nThe node will return a message with the following properties:\r\n\r\n- **payload:** `true` if data write is successfully, `false` if there was an error.\r\n- **queryTime:** number of milliseconds elapsed for the write query\r\n- **variablesNames:** array of the requested variables\r\n- **variablesIds:** array of ids of the requested variables\r\n\r\n**Example output:**\r\n\r\n```json\r\n{\r\n  \"payload\": true,\r\n  \"queryTime\": 482,\r\n  \"variablesNames\": [\"MyDevice.CH1\", \"MyDevice.CH2\"],\r\n  \"variablesIds\": [\r\n    \"56b571010bac431e91cd7f5bd9abef7c\",\r\n    \"ca0c7878698e4885a09782f02516ab35\"\r\n  ]\r\n}\r\n```",
        "category": "DataService",
        "in": [
            {
                "x": 29.285701751708984,
                "y": 747.1426849365234,
                "wires": [
                    {
                        "id": "0dc3812161a4d9d0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1069.28568649292,
                "y": 854.2854900360107,
                "wires": [
                    {
                        "id": "dd57f4ae3713c95f",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "writeIsRemote",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Is DataService installed on a different IED? (If True set URL, User and Password below)"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "writeRemoteURL",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Remote IED URL"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "writeRemoteUser",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Remote IED User"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "writeRemotePass",
                "type": "cred",
                "ui": {
                    "label": {
                        "en-US": "Remote IED Password"
                    }
                }
            }
        ],
        "meta": {
            "module": "DataServiceWriteVariables",
            "version": "0.0.3",
            "desc": "Subflow that implements all the APIs needed to Write variables data to DataService Edge App version >= 1.4.0",
            "keywords": "dataservice, variables, write",
            "license": "MIT"
        },
        "credentials": {
            "writeRemotePass": ""
        },
        "color": "#A6BBCF",
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 180,
            "y": 60,
            "wires": [
                {
                    "id": "1fd57fd4b062153d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "64f73d5c6354ecad",
        "type": "inject",
        "z": "e1beb61bb782119c",
        "name": "At Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "39c59e89dff66d1a",
                "966a87e151020844"
            ]
        ]
    },
    {
        "id": "b12d2ea2e795bbf3",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "Create Var Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceWriteUrl\") + \"/DataService/Variables\";\n\n// set the token if remote configuration is active\nlet IEDToken = flow.get(\"writeIEDToken\");\nlet isRemote = env.get(\"writeIsRemote\");\nif(isRemote)\n{\n    msg.headers[\"Cookie\"] = \"authToken=\" + IEDToken;\n    // send to https\n    node.send([null, msg]);\n}\nelse\n{\n    // send to http\n    node.send([msg, null]);\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 320,
        "wires": [
            [
                "70cba8aea0ba54da"
            ],
            [
                "1cbd5b604faeff03"
            ]
        ]
    },
    {
        "id": "e944135eec1ee5b2",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "Set variablesMap",
        "func": "// create out message\nlet outMsg = {\"payload\": {\n      \"fill\": \"red\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected but no variables found in DataService.\"\n}};\n\n// get the assets map\nlet assetsMap = flow.get(\"writeAssetsMap\");\n\n// init variables Map\nlet variablesMap = {};\n\n// iterate through variables in dataservice\nfor(let i = 0; i < msg.payload.variables.length; i++){\n    // create variable name as assetName.variableName\n    let varName = assetsMap[msg.payload.variables[i].assetId] + \".\" + msg.payload.variables[i].variableName;\n\n    // set variables map as varName : varId\n    variablesMap[varName] = msg.payload.variables[i].variableId;\n}\n\n\nif (Object.keys(variablesMap).length > 0) {\n    flow.set(\"writeVariablesMap\", variablesMap);\n    // set status\n    outMsg.payload = {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected and Configured for writing, \" + Object.keys(variablesMap).length + \" variables found in DataService.\"\n    };\n}\nelse\n{\n    flow.set(\"writeVariablesMap\", null);\n}\n\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "dfc18ef0f73b646e"
            ]
        ]
    },
    {
        "id": "7ca8b589c73deac8",
        "type": "change",
        "z": "e1beb61bb782119c",
        "name": "localURL",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceWriteUrl",
                "pt": "flow",
                "to": "http://edgeappdataservice:4203",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 240,
        "wires": [
            [
                "af69bd707e5e566f"
            ]
        ]
    },
    {
        "id": "af69bd707e5e566f",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "Create Asset Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceWriteUrl\") + \"/AssetService/Assets\";\n\n// set the token if remote configuration is active\nlet IEDToken = flow.get(\"writeIEDToken\");\nlet isRemote = env.get(\"writeIsRemote\");\nif(isRemote)\n{\n    msg.headers[\"Cookie\"] = \"authToken=\" + IEDToken;\n    // send to https\n    node.send([null, msg]);\n}\nelse\n{\n    // send to http\n    node.send([msg, null]);\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "2fd8cf08f4189bb9"
            ],
            [
                "6df6c062b86caaaa"
            ]
        ]
    },
    {
        "id": "2fd8cf08f4189bb9",
        "type": "http request",
        "z": "e1beb61bb782119c",
        "name": "http",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 790,
        "y": 180,
        "wires": [
            [
                "9b49120f5368bee9"
            ]
        ]
    },
    {
        "id": "9b49120f5368bee9",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "Set assetsMap",
        "func": "// init assets list\nlet assetsMap = {};\n\nfor(i=0; i < msg.payload.assets.length; i++){\n    // for each asset set a key:value property as id:name\n    assetsMap[msg.payload.assets[i].assetId] = msg.payload.assets[i].name;\n}\n\n// set assets list as flow tag\nflow.set(\"writeAssetsMap\", assetsMap);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 200,
        "wires": [
            [
                "b12d2ea2e795bbf3"
            ]
        ]
    },
    {
        "id": "39c59e89dff66d1a",
        "type": "exec",
        "z": "e1beb61bb782119c",
        "command": "[ -d \"./dscerts\" ] ",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "6e9b12a25a6191e6"
            ],
            [],
            []
        ]
    },
    {
        "id": "11a235a4fd0edec6",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "create cert command",
        "func": "// get ip from previous command\nlet nodeIpAddress = flow.get(\"nodeIpAddress\");\n\n// init out message\nlet out = {};\n\n// create dir, create root cert, create csr for client cert, create client cert\nlet createCertCommand = 'openssl genrsa -out ./dscerts/rootCAkey.pem 4096';\n\ncreateCertCommand += ' && openssl req -new -sha512 -key ./dscerts/rootCAkey.pem';\ncreateCertCommand += ' -config ./dscerts/rootCA.conf -out ./dscerts/rootCA.csr';\n \ncreateCertCommand += ' && openssl x509 -req -days 3650 -sha512 -in ./dscerts/rootCA.csr';\ncreateCertCommand += ' -signkey ./dscerts/rootCAkey.pem -out ./dscerts/rootCA.pem';\n\ncreateCertCommand += ' && openssl genrsa -out ./dscerts/clientkey.pem 4096';\n\ncreateCertCommand += ' && openssl req -new -sha512 -key ./dscerts/clientkey.pem';\ncreateCertCommand += ' -config ./dscerts/client.conf -out ./dscerts/client.csr';\n\ncreateCertCommand += ' && openssl x509 -req -in ./dscerts/client.csr';\ncreateCertCommand += ' -CA ./dscerts/rootCA.pem -CAkey ./dscerts/rootCAkey.pem';\ncreateCertCommand += ' -CAcreateserial -out ./dscerts/client.pem -days 3650 -sha512';\ncreateCertCommand += ' -extfile <(printf \"subjectAltName=IP:' + nodeIpAddress + '\")';\n\nout.payload = createCertCommand;\n\nreturn out;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 480,
        "wires": [
            [
                "a9aad0f63c50fdc5"
            ]
        ]
    },
    {
        "id": "87090380fec8ed30",
        "type": "exec",
        "z": "e1beb61bb782119c",
        "command": "hostname -i",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 410,
        "y": 500,
        "wires": [
            [
                "4ef69157c1c54163"
            ],
            [],
            []
        ]
    },
    {
        "id": "6e9b12a25a6191e6",
        "type": "switch",
        "z": "e1beb61bb782119c",
        "name": "rc code != 0",
        "property": "rc.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 250,
        "y": 500,
        "wires": [
            [
                "87090380fec8ed30"
            ]
        ]
    },
    {
        "id": "a9aad0f63c50fdc5",
        "type": "exec",
        "z": "e1beb61bb782119c",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 870,
        "y": 540,
        "wires": [
            [
                "5547e4ba2d079d11"
            ],
            [],
            []
        ]
    },
    {
        "id": "b95c6959d59be2b7",
        "type": "exec",
        "z": "e1beb61bb782119c",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 710,
        "y": 580,
        "wires": [
            [
                "11a235a4fd0edec6"
            ],
            [],
            []
        ]
    },
    {
        "id": "4ef69157c1c54163",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "create Conf",
        "func": "// get ip from previous command\nlet nodeIpAddress = msg.payload.replace(/\\n/g, \"\");\nflow.set(\"nodeIpAddress\", nodeIpAddress);\n\n// init out\nlet out = {};\n\n// config file for rootCA certificate CSR\nlet CAcertConfText = '[req]\\n';\nCAcertConfText += 'distinguished_name = req_distinguished_name\\n';\nCAcertConfText += 'req_extensions = v3_req\\n';\nCAcertConfText += 'prompt = no\\n';\nCAcertConfText += '[req_distinguished_name]\\n';\nCAcertConfText += 'C = IT\\n';\nCAcertConfText += 'ST = IT\\n';\nCAcertConfText += 'L = Milan\\n';\nCAcertConfText += 'O = Siemens\\n';\nCAcertConfText += 'OU = DI FA SUP\\n';\nCAcertConfText += 'CN = IndustrialEdgeSelfSignedCA\\n';\nCAcertConfText += '[v3_req]\\n';\nCAcertConfText += 'keyUsage = keyEncipherment, dataEncipherment\\n';\nCAcertConfText += 'extendedKeyUsage = serverAuth\\n';\n\n// config file for client certificate CSR\nlet certConfText = '[req]\\n';\ncertConfText += 'distinguished_name = req_distinguished_name\\n';\ncertConfText += 'req_extensions = v3_req\\n';\ncertConfText += 'prompt = no\\n';\ncertConfText += '[req_distinguished_name]\\n';\ncertConfText += 'C = IT\\n';\ncertConfText += 'ST = IT\\n';\ncertConfText += 'L = Milan\\n';\ncertConfText += 'O = Siemens\\n';\ncertConfText += 'OU = DI FA SUP\\n';\ncertConfText += 'CN = dataserviceNodeRed\\n';\ncertConfText += '[v3_req]\\n';\ncertConfText += 'keyUsage = keyEncipherment, dataEncipherment\\n';\ncertConfText += 'extendedKeyUsage = serverAuth\\n';\ncertConfText += 'subjectAltName = @alt_names\\n';\ncertConfText += '[alt_names]\\n';\ncertConfText += 'IP = ' + nodeIpAddress + '\\n';\n\n// create cert folder and CSR conf files\nout.payload = 'mkdir -p ./dscerts';\nout.payload += ' && echo \"' + CAcertConfText + '\" > ./dscerts/rootCA.conf';\nout.payload += ' && echo \"' + certConfText + '\" > ./dscerts/client.conf';\n\nreturn out;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 540,
        "wires": [
            [
                "b95c6959d59be2b7"
            ]
        ]
    },
    {
        "id": "ef1cee1f2262b2eb",
        "type": "comment",
        "z": "e1beb61bb782119c",
        "name": "search for cert folder",
        "info": "",
        "x": 258.74998474121094,
        "y": 387.4999408721924,
        "wires": []
    },
    {
        "id": "900c6df3cac677fc",
        "type": "comment",
        "z": "e1beb61bb782119c",
        "name": "get ip of container",
        "info": "",
        "x": 469.99998474121094,
        "y": 446.2499656677246,
        "wires": []
    },
    {
        "id": "90c68233108a067c",
        "type": "comment",
        "z": "e1beb61bb782119c",
        "name": "generate rootCA and client certs config",
        "info": "",
        "x": 485.00001525878906,
        "y": 591.2499828338623,
        "wires": []
    },
    {
        "id": "8b3c4413ab5fd663",
        "type": "comment",
        "z": "e1beb61bb782119c",
        "name": "generate rootCA and client certs",
        "info": "",
        "x": 770,
        "y": 440,
        "wires": []
    },
    {
        "id": "966a87e151020844",
        "type": "switch",
        "z": "e1beb61bb782119c",
        "name": "isRemoteIED?",
        "property": "writeIsRemote",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "fabb9c60adb3ceba"
            ],
            [
                "7ca8b589c73deac8"
            ]
        ]
    },
    {
        "id": "fabb9c60adb3ceba",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "Get Remote IED Login Token",
        "func": "// get remote URL,user and password from node configuration\nlet remoteURL = env.get(\"writeRemoteURL\");\nlet remoteUser = env.get(\"writeRemoteUser\");\nlet remotePass = env.get(\"writeRemotePass\");\n\n// check validity of configuration properties\nif (remoteURL != \"\" && remoteUser != \"\" && remotePass != \"\")\n{\n    // init http request msg\n    let outMsg = {\"headers\": {}};\n    // set method\n    outMsg.method = \"POST\";\n    //set url\n    outMsg.url = \"https://\" + remoteURL + \"/device/edge/api/v1/login/direct\";\n    //set body\n    outMsg.payload = {\n      \"username\": remoteUser,\n      \"password\": remotePass\n    };\n    // set headers\n    const strJson = JSON.stringify(msg.payload);\n    const lenJson = Buffer.byteLength(strJson);\n    outMsg.headers['Content-Type'] = 'application/json';\n    //outMsg.headers['Content-Length'] = lenJson;\n    \n    node.send([outMsg, null]);\n}\nelse\n{\n    // create status error message\n    let statusMsg = {\"payload\": {\n        \"fill\": \"red\",\n        \"shape\": \"dot\",\n        \"text\": \"Could not login to Remote IED: Missing configuration.\"\n    }};\n    \n    // reset IED token to null\n    flow.set(\"writeIEDToken\", null);\n    \n    node.send([null, statusMsg]);\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 120,
        "wires": [
            [
                "40863d8d511a8f17"
            ],
            [
                "364a6603a77086f8"
            ]
        ]
    },
    {
        "id": "40863d8d511a8f17",
        "type": "http request",
        "z": "e1beb61bb782119c",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "eebc32cd77ee3508",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 610,
        "y": 80,
        "wires": [
            [
                "6dadd14d1a2c4786"
            ]
        ]
    },
    {
        "id": "364a6603a77086f8",
        "type": "link out",
        "z": "e1beb61bb782119c",
        "name": "Parameter Login Remote IED",
        "mode": "link",
        "links": [
            "1fd57fd4b062153d"
        ],
        "x": 575,
        "y": 140,
        "wires": []
    },
    {
        "id": "dd04fde30a483e33",
        "type": "change",
        "z": "e1beb61bb782119c",
        "name": "remoteURL",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceWriteUrl",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 120,
        "wires": [
            [
                "af69bd707e5e566f"
            ]
        ]
    },
    {
        "id": "6dadd14d1a2c4786",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "Set URL and IED Token with refresh",
        "func": "\n//check response\nif(msg.statusCode == 200)\n{\n    // set IED token to flow variable\n    flow.set(\"writeIEDToken\", msg.payload.data.access_token);\n    \n    // get the ms for next token refresh\n    // get the ms for next token refresh\n    let refreshTokenTime = msg.payload.data.expires_in\n        - new Date().getTime()\n        - (3600 * 6 * 1000);\n    // send refresh token trigger after calculated ms\n    setTimeout(function() {\n        node.send([{}, null, null]);\n        }, refreshTokenTime);\n        \n    // get remote URL from node configuration\n    let remoteURL = env.get(\"writeRemoteURL\");\n    // create and send dataservice remote URL\n    let remoteDataserviceURL = \"https://\" + remoteURL + \"/dataservice\";\n    node.send([null, null, {\"payload\": remoteDataserviceURL}]);\n}\nelse\n{\n    // create status error message\n    let statusMsg = {\"payload\": {\n        \"fill\": \"red\",\n        \"shape\": \"dot\",\n        \"text\": \"Could not login to Remote IED: Missing configuration.\"\n    }};\n    \n    // reset IED token to null\n    flow.set(\"writeIEDToken\", null);\n    \n    node.send([null, statusMsg, null]);    \n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 40,
        "wires": [
            [
                "349290cf020f618f"
            ],
            [
                "c62db9d9bf85e19c"
            ],
            [
                "dd04fde30a483e33"
            ]
        ]
    },
    {
        "id": "c62db9d9bf85e19c",
        "type": "link out",
        "z": "e1beb61bb782119c",
        "name": "Status Login Remote IED",
        "mode": "link",
        "links": [
            "1fd57fd4b062153d"
        ],
        "x": 1075,
        "y": 60,
        "wires": []
    },
    {
        "id": "1fd57fd4b062153d",
        "type": "link in",
        "z": "e1beb61bb782119c",
        "name": "Status Output",
        "links": [
            "c62db9d9bf85e19c",
            "dfc18ef0f73b646e",
            "364a6603a77086f8",
            "b3f46ee6348f6a59"
        ],
        "x": 75,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "6df6c062b86caaaa",
        "type": "http request",
        "z": "e1beb61bb782119c",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "eebc32cd77ee3508",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 790,
        "y": 220,
        "wires": [
            [
                "9b49120f5368bee9"
            ]
        ]
    },
    {
        "id": "70cba8aea0ba54da",
        "type": "http request",
        "z": "e1beb61bb782119c",
        "name": "http",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 830,
        "y": 300,
        "wires": [
            [
                "e944135eec1ee5b2"
            ]
        ]
    },
    {
        "id": "1cbd5b604faeff03",
        "type": "http request",
        "z": "e1beb61bb782119c",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "eebc32cd77ee3508",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 830,
        "y": 340,
        "wires": [
            [
                "e944135eec1ee5b2"
            ]
        ]
    },
    {
        "id": "dfc18ef0f73b646e",
        "type": "link out",
        "z": "e1beb61bb782119c",
        "name": "Variables Map Status",
        "mode": "link",
        "links": [
            "1fd57fd4b062153d"
        ],
        "x": 1155,
        "y": 320,
        "wires": []
    },
    {
        "id": "d9406a344b84e26e",
        "type": "comment",
        "z": "e1beb61bb782119c",
        "name": "login to remote IED URL and get token",
        "info": "",
        "x": 450,
        "y": 40,
        "wires": []
    },
    {
        "id": "aade0cebfb167bcc",
        "type": "comment",
        "z": "e1beb61bb782119c",
        "name": "connect directly to local IED Dataservice",
        "info": "",
        "x": 357.49998474121094,
        "y": 281.24997901916504,
        "wires": []
    },
    {
        "id": "6b1211285fe72f85",
        "type": "comment",
        "z": "e1beb61bb782119c",
        "name": "map assets and variables",
        "info": "",
        "x": 1074.9999237060547,
        "y": 268.7499771118164,
        "wires": []
    },
    {
        "id": "b0e09e9173e14c7f",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "Create Data Request",
        "func": "// init msg\nlet outMsg = {\"headers\": {}};\n\n// set method\noutMsg.method = \"POST\";\n\n// set baseRoute\noutMsg.baseRoute = msg.baseRoute;\n//set url\noutMsg.url = msg.baseRoute;\n\n// MAX NUMBER OF POINTS TO BE SENT WITH ONE REQUEST\nlet maxPoints = 20000;\n\n// init new databuffer\noutMsg.dataBuffer = [];\n// init payload to be written\noutMsg.payload = [];\n\n// copy writestats\noutMsg.writeStats = msg.writeStats;\n\n// get the number of variables remaining to be sent\nlet numVariables = msg.dataBuffer.length;\n// get max points for each variable based on total max points\nlet maxPointsVariable = maxPoints / numVariables;\n\n// for each tag in databuffer\nfor (let i = 0; i < msg.dataBuffer.length; i++)\n{\n    // push write data structure to payload\n    outMsg.payload.push({\n        \"variableId\" : msg.dataBuffer[i].variableId,\n        \"values\": []\n    })\n    // get the act last index of payload\n    let payloadLastIndex = outMsg.payload.length - 1;\n    \n    // check how many points remain to be sent for act variable\n    if(msg.dataBuffer[i].values.length > maxPointsVariable)\n    {\n        // take first N points from databuffer\n        let valsToSend = msg.dataBuffer[i].values.splice(0, maxPointsVariable);\n        // set them to payload\n        outMsg.payload[payloadLastIndex].values = valsToSend;\n        // push the remaining points to new databuffer for next request\n        outMsg.dataBuffer.push(msg.dataBuffer[i]);\n        \n        // update number of points sent\n        outMsg.writeStats.totWritePoints += maxPointsVariable;\n        \n    }\n    else\n    {\n        // push all the points to payload\n        outMsg.payload[payloadLastIndex].values = msg.dataBuffer[i].values;\n        \n        // update number of points sent\n        outMsg.writeStats.totWritePoints += msg.dataBuffer[i].values.length;\n    }\n}\n\n// set the token if remote configuration is active\nlet IEDToken = flow.get(\"writeIEDToken\");\nlet isRemote = env.get(\"writeIsRemote\");\nif(isRemote)\n{\n    outMsg.headers[\"Cookie\"] = \"authToken=\" + IEDToken;\n    // send to https\n    node.send([null, outMsg]);\n}\nelse\n{\n    // send to http\n    node.send([outMsg, null]);\n}\n    \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 789.2856864929199,
        "y": 694.2854900360107,
        "wires": [
            [
                "86466df998b9c2c3"
            ],
            [
                "8f4216b4c5f621aa"
            ]
        ]
    },
    {
        "id": "06ffff61da709d89",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "Init Request",
        "func": "// init variablesNames and Ids\nconst variablesMap = flow.get(\"writeVariablesMap\");\nconst variablesNames = Object.keys(variablesMap);\nconst variablesIds = Object.values(variablesMap);\n\n// init databuffer\nmsg.dataBuffer = [];\n\n// init write stats\nmsg.writeStats = {\n    \"variablesNames\": [],\n    \"variablesIds\": [],\n    \"variablesNum\" : 0,\n    \"totWritePoints\" : 0,\n    \"totPoints\": 0\n};\n\n// substitute varName with varId\nfor (let i = 0; i < msg.payload.length; i++)\n{\n    // search the requested var name in var map\n    let varIndex = variablesNames.indexOf(msg.payload[i].variableName);\n    if(varIndex != -1)\n    {\n        // if found, push variable and values to databuffer\n        msg.dataBuffer.push({\n            \"variableId\": variablesIds[varIndex],\n            \"values\": msg.payload[i].values\n        });\n        \n        // write stats\n        msg.writeStats.variablesNames.push(msg.payload[i].variableName);\n        msg.writeStats.variablesIds.push(variablesIds[varIndex]);\n        msg.writeStats.variablesNum++;\n        msg.writeStats.totPoints += msg.payload[i].values.length;\n    }\n}\n\n// init baseRoute\nmsg.baseRoute = flow.get(\"dataserviceWriteUrl\") + \"/DataService/Data\";\n\n\n\n// if all requested tags are found in variable map\nif (msg.dataBuffer.length == msg.payload.length)\n{\n    flow.set(\"writeStartTime\", new Date().getTime());\n    \n    return [null, msg];\n}\nelse\n{\n    let status = {\"payload\": {\n          \"fill\": \"red\",\n          \"shape\": \"dot\",\n          \"text\": \"Error, some variables name was not found.\"\n    }};\n    \n    // return error message\n    return[status, null];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 599.2856864929199,
        "y": 754.2854900360107,
        "wires": [
            [],
            [
                "b0e09e9173e14c7f"
            ]
        ]
    },
    {
        "id": "dd57f4ae3713c95f",
        "type": "function",
        "z": "e1beb61bb782119c",
        "name": "Recursive Data Writing",
        "func": "\n\n// check if payload has the success prop\nif (msg.payload.hasOwnProperty(\"success\")) {\n    // and if success is true\n    if (msg.payload.success == true) {\n        \n        if(msg.dataBuffer.length > 0)\n        {\n            // create out for next query\n            let out = {\n                \"baseRoute\": msg.baseRoute,\n                \"dataBuffer\": msg.dataBuffer,\n                \"writeStats\": msg.writeStats\n            };\n        \n            \n            // create status message\n            let status = {\"payload\": {\n              \"fill\": \"green\",\n              \"shape\": \"dot\",\n              \"text\": \"Written \" + msg.writeStats.totWritePoints + \" of \" + msg.writeStats.totPoints + \" values...\"\n            }};\n            \n            return [out, status, null];\n        }\n        else \n        { \n            let numPoints = 0;\n\n            // create final out\n            let out = {\n                \"payload\": true,\n                \"queryTime\": new Date().getTime() - flow.get(\"writeStartTime\"),\n                \"variablesNames\": msg.writeStats.variablesNames,\n                \"variablesIds\": msg.writeStats.variablesIds\n            };\n            // create status message\n            let status = {\"payload\": {\n              \"fill\": \"green\",\n              \"shape\": \"dot\",\n              \"text\": new Date().toISOString() + \n                        \"- Write \" + msg.writeStats.totWritePoints +\n                        \" values for \" + msg.writeStats.variablesNum +\n                        \" variables in \" + out.queryTime/1000 + \"s.\"\n            }};\n        \n            return [null, status, out]\n        }\n    }\n    else\n    {\n        // create out message\n        let out = {\n                \"payload\": false,\n                \"queryTime\": new Date().getTime() - flow.get(\"writeStartTime\"),\n                \"variablesNames\": msg.writeStats.variablesNames,\n                \"variablesIds\": msg.writeStats.variablesIds\n        };\n        // create status message\n        let status = {\"payload\": {\n          \"fill\": \"red\",\n          \"shape\": \"dot\",\n          \"text\": \"Error writing data.\"\n        }};\n        \n        return [null, status, out];        \n    }\n}\nelse\n{\n    // create out message\n    let out = {\n            \"payload\": false,\n            \"queryTime\": new Date().getTime() - flow.get(\"writeStartTime\"),\n            \"variablesNames\": msg.writeStats.variablesNames,\n            \"variablesIds\": msg.writeStats.variablesIds\n    };\n    \n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"red\",\n      \"shape\": \"dot\",\n      \"text\": \"Error writing data.\"\n    }};\n    \n    return [null, status, out];   \n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 909.2856864929199,
        "y": 794.2854900360107,
        "wires": [
            [
                "b0e09e9173e14c7f"
            ],
            [
                "b3f46ee6348f6a59"
            ],
            []
        ]
    },
    {
        "id": "f451c93910db33a2",
        "type": "switch",
        "z": "e1beb61bb782119c",
        "name": "variablesMap?",
        "property": "writeVariablesMap",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 409.2856864929199,
        "y": 754.2854900360107,
        "wires": [
            [
                "06ffff61da709d89"
            ]
        ]
    },
    {
        "id": "0dc3812161a4d9d0",
        "type": "switch",
        "z": "e1beb61bb782119c",
        "name": "isRemoteIED?",
        "property": "writeIsRemote",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 188.03570556640625,
        "y": 746.7855167388916,
        "wires": [
            [
                "24adf5f5f2ecc521"
            ],
            [
                "f451c93910db33a2"
            ]
        ]
    },
    {
        "id": "24adf5f5f2ecc521",
        "type": "switch",
        "z": "e1beb61bb782119c",
        "name": "IEDToken?",
        "property": "writeIEDToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 358.03570556640625,
        "y": 686.7855167388916,
        "wires": [
            [
                "f451c93910db33a2"
            ]
        ]
    },
    {
        "id": "e9ff1a0577f3a321",
        "type": "comment",
        "z": "e1beb61bb782119c",
        "name": "check conditions",
        "info": "",
        "x": 200,
        "y": 800,
        "wires": []
    },
    {
        "id": "86466df998b9c2c3",
        "type": "http request",
        "z": "e1beb61bb782119c",
        "name": "http",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 979.2856864929199,
        "y": 674.2854900360107,
        "wires": [
            [
                "dd57f4ae3713c95f"
            ]
        ]
    },
    {
        "id": "8f4216b4c5f621aa",
        "type": "http request",
        "z": "e1beb61bb782119c",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "eebc32cd77ee3508",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 979.2856864929199,
        "y": 714.2854900360107,
        "wires": [
            [
                "dd57f4ae3713c95f"
            ]
        ]
    },
    {
        "id": "b3f46ee6348f6a59",
        "type": "link out",
        "z": "e1beb61bb782119c",
        "name": "Data Writing Status",
        "mode": "link",
        "links": [
            "1fd57fd4b062153d"
        ],
        "x": 1104.28568649292,
        "y": 794.2854900360107,
        "wires": []
    },
    {
        "id": "85cb1f3c7f81e572",
        "type": "comment",
        "z": "e1beb61bb782119c",
        "name": "write data recursevely",
        "info": "",
        "x": 840,
        "y": 860,
        "wires": []
    },
    {
        "id": "5547e4ba2d079d11",
        "type": "link out",
        "z": "e1beb61bb782119c",
        "name": "Certs out",
        "mode": "link",
        "links": [
            "0dc004a44022bca4"
        ],
        "x": 1015,
        "y": 520,
        "wires": []
    },
    {
        "id": "349290cf020f618f",
        "type": "link out",
        "z": "e1beb61bb782119c",
        "name": "Token Refresh Output",
        "mode": "link",
        "links": [
            "0dc004a44022bca4"
        ],
        "x": 1075,
        "y": 20,
        "wires": []
    },
    {
        "id": "0dc004a44022bca4",
        "type": "link in",
        "z": "e1beb61bb782119c",
        "name": "Remote IED Token",
        "links": [
            "5547e4ba2d079d11",
            "349290cf020f618f"
        ],
        "x": 215,
        "y": 120,
        "wires": [
            [
                "fabb9c60adb3ceba"
            ]
        ]
    },
    {
        "id": "eebc32cd77ee3508",
        "type": "tls-config",
        "name": "DataServiceTLS",
        "cert": "./dscerts/client.pem",
        "key": "./dscerts/clientkey.pem",
        "ca": "./dscerts/rootCA.pem",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "318db3b403bc13f5",
        "type": "subflow",
        "name": "DataService Read",
        "info": "# DataService Read Subflow Node\n\nSubflow that implements all the APIs needed to read variables data from **DataService Edge App version >= 1.4.0** based on their **names**, a **from date** and a **to date**.\n\n**Configuration:**\n\nConfigure the variables names to be read in the property **Variables Names** of the node in the format `asset_name.variable_name` separated by commas (no spaces between names and commas, e.g. `MyDevice.CH1,MyDevice.CH2`).\nFor example, to read a variable called **CH1** from the Asset **MyDevice** use **MyDevice.CH1**.\n\nBy checking the **Remote IED checkbox** is it possible to configure the address of the IED that runs **DataService version >= 1.4.0** to be connected.\nFor connecting to a remote DataService instance, the **login credentials** of the IED to be connect are also needed.\nIf the checkbox is **empty** the subflow will try to connect to the local DataService App running on the same IED that runs this node.\n\n**Input Message:**\n\nSend the start and end time of the data query by the properties **from** and **to** in the input message.\nBoth dates has to be in ISO Format (e.g. `2022-08-11T13:48:34.064Z`).\n\n**Example input:**\n\n```json\n{\n  \"from\": \"2021-10-10T15:00:00.000Z\",\n  \"to\": \"2021-10-10T20:00:00.000Z\"\n}\n```\n\n**Output:**\n\nThe node will return a message with the following properties:\n\n- **payload:** object that contains the values and timestamps for each requested variable\n- **queryTime:** number of milliseconds elapsed for the query\n- **variablesNames:** array of the requested variables\n- **variablesIds:** array of ids of the requested variables\n\n**Example output:**\n\n```json\n{\n  \"payload\": {\n    \"MyDevice.CH1\": [\n      {\n        \"timestamp\": \"2022-08-10T11:42:54.506Z\",\n        \"value\": 11697,\n        \"qualitycode\": 192\n      },\n      {\n        \"timestamp\": \"2022-08-10T11:42:55.506Z\",\n        \"value\": 14829,\n        \"qualitycode\": 192\n      }\n    ],\n    \"MyDevice.CH2\": [\n      {\n        \"timestamp\": \"2022-08-10T11:42:54.506Z\",\n        \"value\": 12514,\n        \"qualitycode\": 192\n      },\n      {\n        \"timestamp\": \"2022-08-10T11:42:55.506Z\",\n        \"value\": 11298,\n        \"qualitycode\": 192\n      }\n    ]\n  },\n  \"queryTime\": 482,\n  \"variablesNames\": [\"MyDevice.CH1\", \"MyDevice.CH2\"],\n  \"variablesIds\": [\n    \"56b571010bac431e91cd7f5bd9abef7c\",\n    \"ca0c7878698e4885a09782f02516ab35\"\n  ]\n}\n```\n",
        "category": "DataService",
        "in": [
            {
                "x": 44.999990463256836,
                "y": 739.9999732971191,
                "wires": [
                    {
                        "id": "11e17c4c59782b77"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 860,
                "wires": [
                    {
                        "id": "0848e466c183e7d5",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "readVariablesNames",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-tags",
                    "label": {
                        "en-US": "Variables Names"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "readIsRemote",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Is DataService installed on a different IED? (If True set URL, User and Password below)"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "readRemoteURL",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Remote IED URL"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "readRemoteUser",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Remote IED User"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "readRemotePass",
                "type": "cred",
                "ui": {
                    "label": {
                        "en-US": "Remote IED Password"
                    }
                }
            }
        ],
        "meta": {
            "module": "DataServiceReadVariables",
            "version": "0.0.3",
            "desc": "Subflow that implements all the APIs needed to Read variables data from DataService Edge App version >= 1.4.0",
            "keywords": "dataservice, variables, read",
            "license": "MIT"
        },
        "credentials": {
            "readRemotePass": ""
        },
        "color": "#A6BBCF",
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 140,
            "y": 60,
            "wires": [
                {
                    "id": "68359554ccbe6f54",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "60caf9611dab4b40",
        "type": "inject",
        "z": "318db3b403bc13f5",
        "name": "At Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "570e165ad91d9478",
                "41512fbc9aa90137"
            ]
        ]
    },
    {
        "id": "890119233c9a093f",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "Create Data Request",
        "func": "// init msg\nlet outMsg = {\"headers\": {}};\n\n// set method\noutMsg.method = \"GET\";\n\n// get parameters for data query\n//from like '2021-10-10T10:00:00.000Z';\n//to like'2021-10-10T11:00:00.000Z';\nconst from = new Date(msg.from);\nconst to = new Date(msg.to);\n\n// set baseRoute\noutMsg.baseRoute = msg.baseRoute;\nlet route = msg.baseRoute + \"&from=\" + from.toISOString();\nroute += \"&to=\"   + to.toISOString();\nroute += \"&order=Ascending\";\n//set url\noutMsg.url = route;\n\n// set variablesmap in message\noutMsg.variablesNames = msg.variablesNames;\noutMsg.variablesIds = msg.variablesIds;\n\nif(msg.dataBuffer == \"\")\n{\n    flow.set(\"readStartTime\", new Date().getTime());\n    outMsg.dataBuffer = {};\n    \n    for(i = 0; i < msg.variablesIds.length; i++){\n        outMsg.dataBuffer[msg.variablesIds[i]]  = []; \n    }\n}\nelse\n{\n    outMsg.dataBuffer = msg.dataBuffer;\n}\n\n// set the token if remote configuration is active\nlet IEDToken = flow.get(\"readIEDToken\");\nlet isRemote = env.get(\"readIsRemote\");\nif(isRemote)\n{\n    outMsg.headers[\"Cookie\"] = \"authToken=\" + IEDToken;\n    // send to https\n    node.send([null, outMsg]);\n}\nelse\n{\n    // send to http\n    node.send([outMsg, null]);\n}\n    \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 700,
        "wires": [
            [
                "25b083010a7d02e8"
            ],
            [
                "4658a5c3e924129f"
            ]
        ]
    },
    {
        "id": "e486107472953ab2",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "Create Var Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/DataService/Variables\";\n\n// set the token if remote configuration is active\nlet IEDToken = flow.get(\"readIEDToken\");\nlet isRemote = env.get(\"readIsRemote\");\nif(isRemote)\n{\n    msg.headers[\"Cookie\"] = \"authToken=\" + IEDToken;\n    // send to https\n    node.send([null, msg]);\n}\nelse\n{\n    // send to http\n    node.send([msg, null]);\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "892827c53d6aabba"
            ],
            [
                "8b14a53b36a829e6"
            ]
        ]
    },
    {
        "id": "79c40b17ff59d5e9",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "Set variablesMap",
        "func": "// create out message\nlet outMsg = {\"payload\": {\n      \"fill\": \"red\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected but no variables configured.\"\n}};\n\n// get names of variables in input to be extracted from Data Service app\nlet varName = env.get(\"readVariablesNames\");\nlet varNameArray = varName.split(\",\");\n\n// get the assets map\nlet assetsMap = flow.get(\"readAssetsMap\");\n\n// init variables Map\nlet variablesMap = {};\n\n// iterate through variables in dataservice\nfor(let i = 0; i < msg.payload.variables.length; i++){\n    // create variable name as assetName.variableName\n    let varName = assetsMap[msg.payload.variables[i].assetId] + \".\" + msg.payload.variables[i].variableName;\n\n    // search for varName in input variables\n    if(varNameArray.indexOf(varName) != -1)\n    {\n        // set variables map as varName : varId\n        variablesMap[varName] = msg.payload.variables[i].variableId;\n    }\n}\n\n\nif (Object.keys(variablesMap).length > 0) {\n    flow.set(\"readVariablesMap\", variablesMap);\n    // set status\n    outMsg.payload = {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected and Configured for reading \" + Object.keys(variablesMap).length + \" variables.\"\n    };\n}\nelse\n{\n    flow.set(\"readVariablesMap\", null);\n}\n\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 320,
        "wires": [
            [
                "40f25ad2a52c7bfa"
            ]
        ]
    },
    {
        "id": "138c87f46ff7600c",
        "type": "switch",
        "z": "318db3b403bc13f5",
        "name": "variablesMap?",
        "property": "readVariablesMap",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 401.2499809265137,
        "y": 747.4999732971191,
        "wires": [
            [
                "a7cb85e1678c621a"
            ]
        ]
    },
    {
        "id": "a7cb85e1678c621a",
        "type": "switch",
        "z": "318db3b403bc13f5",
        "name": "dateFromPicked?",
        "property": "from",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 391.2499809265137,
        "y": 787.4999732971191,
        "wires": [
            [
                "e6ad9ebc4281ae32"
            ]
        ]
    },
    {
        "id": "e6ad9ebc4281ae32",
        "type": "switch",
        "z": "318db3b403bc13f5",
        "name": "dateToPicked?",
        "property": "to",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 401.2499809265137,
        "y": 827.4999732971191,
        "wires": [
            [
                "0571e346dc1d8847"
            ]
        ]
    },
    {
        "id": "fab6122a3b022c07",
        "type": "change",
        "z": "318db3b403bc13f5",
        "name": "localURL",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceReadUrl",
                "pt": "flow",
                "to": "http://edgeappdataservice:4203",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 240,
        "wires": [
            [
                "50a9a52b568308fc"
            ]
        ]
    },
    {
        "id": "50a9a52b568308fc",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "Create Asset Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/AssetService/Assets\";\n\n// set the token if remote configuration is active\nlet IEDToken = flow.get(\"readIEDToken\");\nlet isRemote = env.get(\"readIsRemote\");\nif(isRemote)\n{\n    msg.headers[\"Cookie\"] = \"authToken=\" + IEDToken;\n    // send to https\n    node.send([null, msg]);\n}\nelse\n{\n    // send to http\n    node.send([msg, null]);\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 200,
        "wires": [
            [
                "a8bbb6944cb64020"
            ],
            [
                "f574019fb98f8430"
            ]
        ]
    },
    {
        "id": "a8bbb6944cb64020",
        "type": "http request",
        "z": "318db3b403bc13f5",
        "name": "http",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 180,
        "wires": [
            [
                "09ee5f9a08a3f181"
            ]
        ]
    },
    {
        "id": "09ee5f9a08a3f181",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "Set assetsMap",
        "func": "// init assets list\nlet assetsMap = {};\n\nfor(i=0; i < msg.payload.assets.length; i++){\n    // for each asset set a key:value property as id:name\n    assetsMap[msg.payload.assets[i].assetId] = msg.payload.assets[i].name;\n}\n\n// set assets list as flow tag\nflow.set(\"readAssetsMap\", assetsMap);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 200,
        "wires": [
            [
                "e486107472953ab2"
            ]
        ]
    },
    {
        "id": "0571e346dc1d8847",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "Init Request",
        "func": "\n\n// init variablesNames and Ids\nconst variablesMap = flow.get(\"readVariablesMap\");\nmsg.variablesNames = Object.keys(variablesMap);\nmsg.variablesIds = Object.values(variablesMap);\n\n// init databuffer\nmsg.dataBuffer = \"\";\n\n// init baseRoute\nmsg.baseRoute = flow.get(\"dataserviceReadUrl\") +\n                \"/DataService/Data?variableIds=[\\\"\" \n                + msg.variablesIds.join(\"\\\",\\\"\") + \"\\\"]\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 593.75,
        "y": 827.4999504089355,
        "wires": [
            [
                "890119233c9a093f"
            ]
        ]
    },
    {
        "id": "0848e466c183e7d5",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "Recursive Data Extraction",
        "func": "\n// loop over data received from dataservice\nfor(i=0; i<msg.payload.data.length; i++){\n    let varData = msg.payload.data[i];\n    // concatenate actual databuffer with new data \n    msg.dataBuffer[varData.variableId] = msg.dataBuffer[varData.variableId].concat(varData.values);\n}\n\n// check if some data are still to be queried\nif (msg.payload.hasOwnProperty(\"hasMoreData\")) {\n    // create out for next query\n    let out = {\n        \"baseRoute\": msg.baseRoute,\n        \"from\": msg.payload.hasMoreData.from,\n        \"to\": msg.payload.hasMoreData.to,\n        \"dataBuffer\": msg.dataBuffer,\n        \"variablesNames\": msg.variablesNames,\n        \"variablesIds\": msg.variablesIds\n    };\n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Querying data in progress...\"\n    }};\n    \n    return [out, status, null];\n    \n}\nelse {\n    // change ids with names before sending databuffer \n    let newDataBuffer = {};\n    let numPoints = 0;\n    for(let i = 0; i < msg.variablesIds.length; i++)\n    {\n        newDataBuffer[msg.variablesNames[i]] = msg.dataBuffer[msg.variablesIds[i]];\n        numPoints += msg.dataBuffer[msg.variablesIds[i]].length\n    }\n    \n    // create final out\n    let out = {\n        \"payload\": newDataBuffer,\n        \"queryTime\": new Date().getTime() - flow.get(\"readStartTime\"),\n        \"variablesNames\": msg.variablesNames,\n        \"variablesIds\": msg.variablesIds\n    };\n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": new Date().toISOString() + \n                \"- Read \" + numPoints +\n                \" values from \" + msg.variablesIds.length +\n                \" variables in \" + out.queryTime/1000 + \"s.\"\n    }};\n\n    return [null, status, out]\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 800,
        "wires": [
            [
                "890119233c9a093f"
            ],
            [
                "1627a84dd799d100"
            ],
            []
        ]
    },
    {
        "id": "570e165ad91d9478",
        "type": "exec",
        "z": "318db3b403bc13f5",
        "command": "[ -d \"./dscerts\" ] ",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 200,
        "y": 440,
        "wires": [
            [
                "95ecaa3ed39b9f63"
            ],
            [],
            []
        ]
    },
    {
        "id": "8fdf6ecc293ba490",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "create cert command",
        "func": "// get ip from previous command\nlet nodeIpAddress = flow.get(\"nodeIpAddress\");\n\n// init out message\nlet out = {};\n\n// create dir, create root cert, create csr for client cert, create client cert\nlet createCertCommand = 'openssl genrsa -out ./dscerts/rootCAkey.pem 4096';\n\ncreateCertCommand += ' && openssl req -new -sha512 -key ./dscerts/rootCAkey.pem';\ncreateCertCommand += ' -config ./dscerts/rootCA.conf -out ./dscerts/rootCA.csr';\n \ncreateCertCommand += ' && openssl x509 -req -days 9999 -sha512 -in ./dscerts/rootCA.csr';\ncreateCertCommand += ' -signkey ./dscerts/rootCAkey.pem -out ./dscerts/rootCA.pem';\n\ncreateCertCommand += ' && openssl genrsa -out ./dscerts/clientkey.pem 4096';\n\ncreateCertCommand += ' && openssl req -new -sha512 -key ./dscerts/clientkey.pem';\ncreateCertCommand += ' -config /data/dscerts/client.conf -out ./dscerts/client.csr';\n\ncreateCertCommand += ' && openssl x509 -req -in ./dscerts/client.csr';\ncreateCertCommand += ' -CA ./dscerts/rootCA.pem -CAkey ./dscerts/rootCAkey.pem';\ncreateCertCommand += ' -CAcreateserial -out ./dscerts/client.pem -days 9999 -sha512';\ncreateCertCommand += ' -extfile <(printf \"subjectAltName=IP:' + nodeIpAddress + '\")';\n\nout.payload = createCertCommand;\n\nreturn out;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 480,
        "wires": [
            [
                "c787a2cc7c6d7a53"
            ]
        ]
    },
    {
        "id": "6d130ea2abc0178c",
        "type": "exec",
        "z": "318db3b403bc13f5",
        "command": "hostname -i",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 500,
        "wires": [
            [
                "c3487098de3a7c23"
            ],
            [],
            []
        ]
    },
    {
        "id": "95ecaa3ed39b9f63",
        "type": "switch",
        "z": "318db3b403bc13f5",
        "name": "rc code != 0",
        "property": "rc.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 500,
        "wires": [
            [
                "6d130ea2abc0178c"
            ]
        ]
    },
    {
        "id": "c787a2cc7c6d7a53",
        "type": "exec",
        "z": "318db3b403bc13f5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 850,
        "y": 540,
        "wires": [
            [
                "8b6ffccdd6cdd2d5"
            ],
            [],
            []
        ]
    },
    {
        "id": "20f01b0fc8640fc4",
        "type": "exec",
        "z": "318db3b403bc13f5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "8fdf6ecc293ba490"
            ],
            [],
            []
        ]
    },
    {
        "id": "c3487098de3a7c23",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "create Conf",
        "func": "// get ip from previous command\nlet nodeIpAddress = msg.payload.replace(/\\n/g, \"\");\nflow.set(\"nodeIpAddress\", nodeIpAddress);\n\n// init out\nlet out = {};\n\n// config file for rootCA certificate CSR\nlet CAcertConfText = '[req]\\n';\nCAcertConfText += 'distinguished_name = req_distinguished_name\\n';\nCAcertConfText += 'req_extensions = v3_req\\n';\nCAcertConfText += 'prompt = no\\n';\nCAcertConfText += '[req_distinguished_name]\\n';\nCAcertConfText += 'C = IT\\n';\nCAcertConfText += 'ST = IT\\n';\nCAcertConfText += 'L = Milan\\n';\nCAcertConfText += 'O = Siemens\\n';\nCAcertConfText += 'OU = DI FA SUP\\n';\nCAcertConfText += 'CN = IndustrialEdgeSelfSignedCA\\n';\nCAcertConfText += '[v3_req]\\n';\nCAcertConfText += 'keyUsage = keyEncipherment, dataEncipherment\\n';\nCAcertConfText += 'extendedKeyUsage = serverAuth\\n';\n\n// config file for client certificate CSR\nlet certConfText = '[req]\\n';\ncertConfText += 'distinguished_name = req_distinguished_name\\n';\ncertConfText += 'req_extensions = v3_req\\n';\ncertConfText += 'prompt = no\\n';\ncertConfText += '[req_distinguished_name]\\n';\ncertConfText += 'C = IT\\n';\ncertConfText += 'ST = IT\\n';\ncertConfText += 'L = Milan\\n';\ncertConfText += 'O = Siemens\\n';\ncertConfText += 'OU = DI FA SUP\\n';\ncertConfText += 'CN = dataserviceNodeRed\\n';\ncertConfText += '[v3_req]\\n';\ncertConfText += 'keyUsage = keyEncipherment, dataEncipherment\\n';\ncertConfText += 'extendedKeyUsage = serverAuth\\n';\ncertConfText += 'subjectAltName = @alt_names\\n';\ncertConfText += '[alt_names]\\n';\ncertConfText += 'IP = ' + nodeIpAddress + '\\n';\n\n// create cert folder and CSR conf files\nout.payload = 'mkdir -p ./dscerts';\nout.payload += ' && echo \"' + CAcertConfText + '\" > ./dscerts/rootCA.conf';\nout.payload += ' && echo \"' + certConfText + '\" > ./dscerts/client.conf';\n\nreturn out;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 540,
        "wires": [
            [
                "20f01b0fc8640fc4"
            ]
        ]
    },
    {
        "id": "8b8d421b75864f21",
        "type": "comment",
        "z": "318db3b403bc13f5",
        "name": "search for cert folder",
        "info": "",
        "x": 238.74998474121094,
        "y": 387.4999408721924,
        "wires": []
    },
    {
        "id": "7ce28ac951ab6e4b",
        "type": "comment",
        "z": "318db3b403bc13f5",
        "name": "get ip of container",
        "info": "",
        "x": 449.99998474121094,
        "y": 446.2499656677246,
        "wires": []
    },
    {
        "id": "cc57456068095913",
        "type": "comment",
        "z": "318db3b403bc13f5",
        "name": "generate rootCA and client certs config",
        "info": "",
        "x": 465.00001525878906,
        "y": 591.2499828338623,
        "wires": []
    },
    {
        "id": "29febfb19e49fc26",
        "type": "comment",
        "z": "318db3b403bc13f5",
        "name": "generate rootCA and client certs",
        "info": "",
        "x": 750,
        "y": 440,
        "wires": []
    },
    {
        "id": "41512fbc9aa90137",
        "type": "switch",
        "z": "318db3b403bc13f5",
        "name": "isRemoteIED?",
        "property": "readIsRemote",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 180,
        "wires": [
            [
                "679bf4cff5256a1c"
            ],
            [
                "fab6122a3b022c07"
            ]
        ]
    },
    {
        "id": "679bf4cff5256a1c",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "Get Remote IED Login Token",
        "func": "// get remote URL,user and password from node configuration\nlet remoteURL = env.get(\"readRemoteURL\");\nlet remoteUser = env.get(\"readRemoteUser\");\nlet remotePass = env.get(\"readRemotePass\");\n\n// check validity of configuration properties\nif (remoteURL != \"\" && remoteUser != \"\" && remotePass != \"\")\n{\n    // init http request msg\n    let outMsg = {\"headers\": {}};\n    // set method\n    outMsg.method = \"POST\";\n    //set url\n    outMsg.url = \"https://\" + remoteURL + \"/device/edge/api/v1/login/direct\";\n    //set body\n    outMsg.payload = {\n      \"username\": remoteUser,\n      \"password\": remotePass\n    };\n    // set headers\n    const strJson = JSON.stringify(outMsg.payload);\n    const lenJson = Buffer.byteLength(strJson);\n    outMsg.headers['Content-Type'] = 'application/json';\n    \n    node.send([outMsg, null]);\n}\nelse\n{\n    // create status error message\n    let statusMsg = {\"payload\": {\n        \"fill\": \"red\",\n        \"shape\": \"dot\",\n        \"text\": \"Could not login to Remote IED: Missing configuration.\"\n    }};\n    \n    // reset IED token to null\n    flow.set(\"readIEDToken\", null);\n    \n    node.send([null, statusMsg]);\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "a6739d294548a9d2"
            ],
            [
                "cfd65b43f55c47ad"
            ]
        ]
    },
    {
        "id": "a6739d294548a9d2",
        "type": "http request",
        "z": "318db3b403bc13f5",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e6561860a6dde8ea",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "fd63eb58d1e3967e"
            ]
        ]
    },
    {
        "id": "cfd65b43f55c47ad",
        "type": "link out",
        "z": "318db3b403bc13f5",
        "name": "Parameter Login Remote IED",
        "mode": "link",
        "links": [
            "68359554ccbe6f54"
        ],
        "x": 555,
        "y": 140,
        "wires": []
    },
    {
        "id": "705eb31e3a46570c",
        "type": "change",
        "z": "318db3b403bc13f5",
        "name": "remoteURL",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceReadUrl",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 120,
        "wires": [
            [
                "50a9a52b568308fc"
            ]
        ]
    },
    {
        "id": "fd63eb58d1e3967e",
        "type": "function",
        "z": "318db3b403bc13f5",
        "name": "Set URL and IED Token with refresh",
        "func": "\n//check response\nif(msg.statusCode == 200)\n{\n    // set IED token to flow variable\n    flow.set(\"readIEDToken\", msg.payload.data.access_token);\n    \n    // get the ms for next token refresh\n    let refreshTokenTime = msg.payload.data.expires_in\n        - new Date().getTime()\n        - (3600 * 6 * 1000);\n    // send refresh token trigger after calculated ms\n    setTimeout(function() {\n        node.send([{}, null, null]);\n        }, refreshTokenTime);\n        \n    // get remote URL from node configuration\n    let remoteURL = env.get(\"readRemoteURL\");\n    // create and send dataservice remote URL\n    let remoteDataserviceURL = \"https://\" + remoteURL + \"/dataservice\";\n    node.send([null, null, {\"payload\": remoteDataserviceURL}]);\n}\nelse\n{\n    // create status error message\n    let statusMsg = {\"payload\": {\n        \"fill\": \"red\",\n        \"shape\": \"dot\",\n        \"text\": \"Could not login to Remote IED: \" + msg.payload.errors[0].message\n    }};\n    \n    // reset IED token to null\n    flow.set(\"readIEDToken\", null);\n    \n    node.send([null, statusMsg, null]);    \n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 40,
        "wires": [
            [
                "882bd785e51b6f96"
            ],
            [
                "fc7f357a59298822"
            ],
            [
                "705eb31e3a46570c"
            ]
        ]
    },
    {
        "id": "11e17c4c59782b77",
        "type": "switch",
        "z": "318db3b403bc13f5",
        "name": "isRemoteIED?",
        "property": "readIsRemote",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 740,
        "wires": [
            [
                "57dc016b08716bbd"
            ],
            [
                "138c87f46ff7600c"
            ]
        ]
    },
    {
        "id": "57dc016b08716bbd",
        "type": "switch",
        "z": "318db3b403bc13f5",
        "name": "IEDToken?",
        "property": "readIEDToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 680,
        "wires": [
            [
                "138c87f46ff7600c"
            ]
        ]
    },
    {
        "id": "fc7f357a59298822",
        "type": "link out",
        "z": "318db3b403bc13f5",
        "name": "Status Login Remote IED",
        "mode": "link",
        "links": [
            "68359554ccbe6f54"
        ],
        "x": 1055,
        "y": 80,
        "wires": []
    },
    {
        "id": "68359554ccbe6f54",
        "type": "link in",
        "z": "318db3b403bc13f5",
        "name": "Status Output",
        "links": [
            "1627a84dd799d100",
            "40f25ad2a52c7bfa",
            "cfd65b43f55c47ad",
            "fc7f357a59298822"
        ],
        "x": 55,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f574019fb98f8430",
        "type": "http request",
        "z": "318db3b403bc13f5",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e6561860a6dde8ea",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "09ee5f9a08a3f181"
            ]
        ]
    },
    {
        "id": "892827c53d6aabba",
        "type": "http request",
        "z": "318db3b403bc13f5",
        "name": "http",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 810,
        "y": 300,
        "wires": [
            [
                "79c40b17ff59d5e9"
            ]
        ]
    },
    {
        "id": "8b14a53b36a829e6",
        "type": "http request",
        "z": "318db3b403bc13f5",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e6561860a6dde8ea",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 810,
        "y": 340,
        "wires": [
            [
                "79c40b17ff59d5e9"
            ]
        ]
    },
    {
        "id": "1627a84dd799d100",
        "type": "link out",
        "z": "318db3b403bc13f5",
        "name": "Data Extraction Status",
        "mode": "link",
        "links": [
            "68359554ccbe6f54"
        ],
        "x": 1035,
        "y": 800,
        "wires": []
    },
    {
        "id": "40f25ad2a52c7bfa",
        "type": "link out",
        "z": "318db3b403bc13f5",
        "name": "Variables Map Status",
        "mode": "link",
        "links": [
            "68359554ccbe6f54"
        ],
        "x": 1135,
        "y": 320,
        "wires": []
    },
    {
        "id": "23fbb34768e917e5",
        "type": "comment",
        "z": "318db3b403bc13f5",
        "name": "login to remote IED URL and get token",
        "info": "",
        "x": 430,
        "y": 40,
        "wires": []
    },
    {
        "id": "5e01270c812bd536",
        "type": "comment",
        "z": "318db3b403bc13f5",
        "name": "connect directly to local IED Dataservice",
        "info": "",
        "x": 337.49998474121094,
        "y": 281.24997901916504,
        "wires": []
    },
    {
        "id": "18d41db5ac1a544b",
        "type": "comment",
        "z": "318db3b403bc13f5",
        "name": "map assets and variables",
        "info": "",
        "x": 1054.9999237060547,
        "y": 268.7499771118164,
        "wires": []
    },
    {
        "id": "95a7f5798dab95b2",
        "type": "comment",
        "z": "318db3b403bc13f5",
        "name": "check conditions",
        "info": "",
        "x": 180,
        "y": 800,
        "wires": []
    },
    {
        "id": "25b083010a7d02e8",
        "type": "http request",
        "z": "318db3b403bc13f5",
        "name": "http",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 970,
        "y": 680,
        "wires": [
            [
                "0848e466c183e7d5"
            ]
        ]
    },
    {
        "id": "4658a5c3e924129f",
        "type": "http request",
        "z": "318db3b403bc13f5",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e6561860a6dde8ea",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 970,
        "y": 720,
        "wires": [
            [
                "0848e466c183e7d5"
            ]
        ]
    },
    {
        "id": "de22db188942c9b8",
        "type": "comment",
        "z": "318db3b403bc13f5",
        "name": "get data recursevely",
        "info": "",
        "x": 790,
        "y": 860,
        "wires": []
    },
    {
        "id": "8b6ffccdd6cdd2d5",
        "type": "link out",
        "z": "318db3b403bc13f5",
        "name": "Certs out",
        "mode": "link",
        "links": [
            "9a4519ccc13d8630"
        ],
        "x": 955,
        "y": 520,
        "wires": []
    },
    {
        "id": "9a4519ccc13d8630",
        "type": "link in",
        "z": "318db3b403bc13f5",
        "name": "Remote IED Token",
        "links": [
            "882bd785e51b6f96",
            "8b6ffccdd6cdd2d5"
        ],
        "x": 215,
        "y": 120,
        "wires": [
            [
                "679bf4cff5256a1c"
            ]
        ]
    },
    {
        "id": "882bd785e51b6f96",
        "type": "link out",
        "z": "318db3b403bc13f5",
        "name": "Token Refresh Output",
        "mode": "link",
        "links": [
            "9a4519ccc13d8630"
        ],
        "x": 1055,
        "y": 40,
        "wires": []
    },
    {
        "id": "e6561860a6dde8ea",
        "type": "tls-config",
        "z": "318db3b403bc13f5",
        "name": "DataServiceTLS",
        "cert": "./dscerts/client.pem",
        "key": "./dscerts/clientkey.pem",
        "ca": "./dscerts/rootCA.pem",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "319316c0f8b3b3e8",
        "type": "subflow:318db3b403bc13f5",
        "z": "2a5436138f9a79c3",
        "name": "",
        "x": 270,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "7d63817232505547",
        "type": "subflow:e1beb61bb782119c",
        "z": "2a5436138f9a79c3",
        "name": "",
        "x": 270,
        "y": 780,
        "wires": [
            []
        ]
    }
]