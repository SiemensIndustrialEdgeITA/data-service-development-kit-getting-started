[
    {
        "id": "47c65435a62cd49d",
        "type": "subflow",
        "name": "DataService Read",
        "info": "# DataService Read Subflow Node\n\nSubflow that implements all the APIs needed to read variables data from **DataService Edge App version >= 1.4.0** based on their **names**, a **from date** and a **to date**.\n\n**Configuration:**\n\nConfigure the variables names to be read in the property **Variables Names** of the node in the format `asset_name.variable_name` separated by commas (no spaces between names and commas, e.g. `MyDevice.CH1,MyDevice.CH2`).\nFor example, to read a variable called **CH1** from the Asset **MyDevice** use **MyDevice.CH1**.\n\nBy checking the **Remote IED checkbox** is it possible to configure the address of the IED that runs **DataService version >= 1.4.0** to be connected.\nFor connecting to a remote DataService instance, the **login credentials** of the IED to be connect are also needed.\nIf the checkbox is **empty** the subflow will try to connect to the local DataService App running on the same IED that runs this node.\n\n**Input Message:**\n\nSend the start and end time of the data query by the properties **from** and **to** in the input message.\nBoth dates has to be in ISO Format (e.g. `2022-08-11T13:48:34.064Z`).\n\n**Example input:**\n\n```json\n{\n  \"from\": \"2021-10-10T15:00:00.000Z\",\n  \"to\": \"2021-10-10T20:00:00.000Z\"\n}\n```\n\n**Output:**\n\nThe node will return a message with the following properties:\n\n- **payload:** object that contains the values and timestamps for each requested variable\n- **queryTime:** number of milliseconds elapsed for the query\n- **variablesNames:** array of the requested variables\n- **variablesIds:** array of ids of the requested variables\n\n**Example output:**\n\n```json\n{\n  \"payload\": {\n    \"MyDevice.CH1\": [\n      {\n        \"timestamp\": \"2022-08-10T11:42:54.506Z\",\n        \"value\": 11697,\n        \"qualitycode\": 192\n      },\n      {\n        \"timestamp\": \"2022-08-10T11:42:55.506Z\",\n        \"value\": 14829,\n        \"qualitycode\": 192\n      }\n    ],\n    \"MyDevice.CH2\": [\n      {\n        \"timestamp\": \"2022-08-10T11:42:54.506Z\",\n        \"value\": 12514,\n        \"qualitycode\": 192\n      },\n      {\n        \"timestamp\": \"2022-08-10T11:42:55.506Z\",\n        \"value\": 11298,\n        \"qualitycode\": 192\n      }\n    ]\n  },\n  \"queryTime\": 482,\n  \"variablesNames\": [\"MyDevice.CH1\", \"MyDevice.CH2\"],\n  \"variablesIds\": [\n    \"56b571010bac431e91cd7f5bd9abef7c\",\n    \"ca0c7878698e4885a09782f02516ab35\"\n  ]\n}\n```\n",
        "category": "DataService",
        "in": [
            {
                "x": 44.999990463256836,
                "y": 739.9999732971191,
                "wires": [
                    {
                        "id": "3cf37741633dd3cb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 860,
                "wires": [
                    {
                        "id": "e31a8e9b37a738e9",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "readVariablesNames",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-tags",
                    "label": {
                        "en-US": "Variables Names"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "readIsRemote",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Is DataService installed on a different IED? (If True set URL, User and Password below)"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "readRemoteURL",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Remote IED URL"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "readRemoteUser",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Remote IED User"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "readRemotePass",
                "type": "cred",
                "ui": {
                    "label": {
                        "en-US": "Remote IED Password"
                    }
                }
            }
        ],
        "meta": {
            "module": "DataServiceReadVariables",
            "version": "0.0.3",
            "desc": "Subflow that implements all the APIs needed to Read variables data from DataService Edge App version >= 1.4.0",
            "keywords": "dataservice, variables, read",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 140,
            "y": 60,
            "wires": [
                {
                    "id": "9d89e63e5d6cfb0f",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "41726bb23b9c6678",
        "type": "inject",
        "z": "47c65435a62cd49d",
        "name": "At Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "01063d497886f837",
                "0231123d43f9f84e"
            ]
        ]
    },
    {
        "id": "ae903e683e45234b",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "Create Data Request",
        "func": "// init msg\nlet outMsg = {\"headers\": {}};\n\n// set method\noutMsg.method = \"GET\";\n\n// get parameters for data query\n//from like '2021-10-10T10:00:00.000Z';\n//to like'2021-10-10T11:00:00.000Z';\nconst from = new Date(msg.from);\nconst to = new Date(msg.to);\n\n// set baseRoute\noutMsg.baseRoute = msg.baseRoute;\nlet route = msg.baseRoute + \"&from=\" + from.toISOString();\nroute += \"&to=\"   + to.toISOString();\nroute += \"&order=Ascending\";\n//set url\noutMsg.url = route;\n\n// set variablesmap in message\noutMsg.variablesNames = msg.variablesNames;\noutMsg.variablesIds = msg.variablesIds;\n\nif(msg.dataBuffer == \"\")\n{\n    flow.set(\"readStartTime\", new Date().getTime());\n    outMsg.dataBuffer = {};\n    \n    for(i = 0; i < msg.variablesIds.length; i++){\n        outMsg.dataBuffer[msg.variablesIds[i]]  = []; \n    }\n}\nelse\n{\n    outMsg.dataBuffer = msg.dataBuffer;\n}\n\n// set the token if remote configuration is active\nlet IEDToken = flow.get(\"readIEDToken\");\nlet isRemote = env.get(\"readIsRemote\");\nif(isRemote)\n{\n    outMsg.headers[\"Cookie\"] = \"authToken=\" + IEDToken;\n    // send to https\n    node.send([null, outMsg]);\n}\nelse\n{\n    // send to http\n    node.send([outMsg, null]);\n}\n    \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 700,
        "wires": [
            [
                "9633c620bce38998"
            ],
            [
                "9c82cca98ac52213"
            ]
        ]
    },
    {
        "id": "8fc3d0312a86a507",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "Create Var Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/DataService/Variables\";\n\n// set the token if remote configuration is active\nlet IEDToken = flow.get(\"readIEDToken\");\nlet isRemote = env.get(\"readIsRemote\");\nif(isRemote)\n{\n    msg.headers[\"Cookie\"] = \"authToken=\" + IEDToken;\n    // send to https\n    node.send([null, msg]);\n}\nelse\n{\n    // send to http\n    node.send([msg, null]);\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "e90e553a8347dc32"
            ],
            [
                "d49b288521e1f43c"
            ]
        ]
    },
    {
        "id": "d6b2dea04eaafc5c",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "Set variablesMap",
        "func": "// create out message\nlet outMsg = {\"payload\": {\n      \"fill\": \"red\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected but no variables configured.\"\n}};\n\n// get names of variables in input to be extracted from Data Service app\nlet varName = env.get(\"readVariablesNames\");\nlet varNameArray = varName.split(\",\");\n\n// get the assets map\nlet assetsMap = flow.get(\"readAssetsMap\");\n\n// init variables Map\nlet variablesMap = {};\n\n// iterate through variables in dataservice\nfor(let i = 0; i < msg.payload.variables.length; i++){\n    // create variable name as assetName.variableName\n    let varName = assetsMap[msg.payload.variables[i].assetId] + \".\" + msg.payload.variables[i].variableName;\n\n    // search for varName in input variables\n    if(varNameArray.indexOf(varName) != -1)\n    {\n        // set variables map as varName : varId\n        variablesMap[varName] = msg.payload.variables[i].variableId;\n    }\n}\n\n\nif (Object.keys(variablesMap).length > 0) {\n    flow.set(\"readVariablesMap\", variablesMap);\n    // set status\n    outMsg.payload = {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected and Configured for reading \" + Object.keys(variablesMap).length + \" variables.\"\n    };\n}\nelse\n{\n    flow.set(\"readVariablesMap\", null);\n}\n\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 320,
        "wires": [
            [
                "c979df9438ad2b21"
            ]
        ]
    },
    {
        "id": "bf78ddf47e51e797",
        "type": "switch",
        "z": "47c65435a62cd49d",
        "name": "variablesMap?",
        "property": "readVariablesMap",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 401.2499809265137,
        "y": 747.4999732971191,
        "wires": [
            [
                "fc74032b6518bbd4"
            ]
        ]
    },
    {
        "id": "fc74032b6518bbd4",
        "type": "switch",
        "z": "47c65435a62cd49d",
        "name": "dateFromPicked?",
        "property": "from",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 391.2499809265137,
        "y": 787.4999732971191,
        "wires": [
            [
                "2aeda755a6139696"
            ]
        ]
    },
    {
        "id": "2aeda755a6139696",
        "type": "switch",
        "z": "47c65435a62cd49d",
        "name": "dateToPicked?",
        "property": "to",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 401.2499809265137,
        "y": 827.4999732971191,
        "wires": [
            [
                "8ba43b15fdde4a9d"
            ]
        ]
    },
    {
        "id": "2acbe6a307341038",
        "type": "change",
        "z": "47c65435a62cd49d",
        "name": "localURL",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceReadUrl",
                "pt": "flow",
                "to": "http://edgeappdataservice:4203",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 240,
        "wires": [
            [
                "ab49eee5e1121115"
            ]
        ]
    },
    {
        "id": "ab49eee5e1121115",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "Create Asset Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/AssetService/Assets\";\n\n// set the token if remote configuration is active\nlet IEDToken = flow.get(\"readIEDToken\");\nlet isRemote = env.get(\"readIsRemote\");\nif(isRemote)\n{\n    msg.headers[\"Cookie\"] = \"authToken=\" + IEDToken;\n    // send to https\n    node.send([null, msg]);\n}\nelse\n{\n    // send to http\n    node.send([msg, null]);\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 200,
        "wires": [
            [
                "a9a78a2970ebec0c"
            ],
            [
                "963a27dc3cb671c9"
            ]
        ]
    },
    {
        "id": "a9a78a2970ebec0c",
        "type": "http request",
        "z": "47c65435a62cd49d",
        "name": "http",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 180,
        "wires": [
            [
                "60f737c3c5ba7d1b"
            ]
        ]
    },
    {
        "id": "60f737c3c5ba7d1b",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "Set assetsMap",
        "func": "// init assets list\nlet assetsMap = {};\n\nfor(i=0; i < msg.payload.assets.length; i++){\n    // for each asset set a key:value property as id:name\n    assetsMap[msg.payload.assets[i].assetId] = msg.payload.assets[i].name;\n}\n\n// set assets list as flow tag\nflow.set(\"readAssetsMap\", assetsMap);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 200,
        "wires": [
            [
                "8fc3d0312a86a507"
            ]
        ]
    },
    {
        "id": "8ba43b15fdde4a9d",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "Init Request",
        "func": "\n\n// init variablesNames and Ids\nconst variablesMap = flow.get(\"readVariablesMap\");\nmsg.variablesNames = Object.keys(variablesMap);\nmsg.variablesIds = Object.values(variablesMap);\n\n// init databuffer\nmsg.dataBuffer = \"\";\n\n// init baseRoute\nmsg.baseRoute = flow.get(\"dataserviceReadUrl\") +\n                \"/DataService/Data?variableIds=[\\\"\" \n                + msg.variablesIds.join(\"\\\",\\\"\") + \"\\\"]\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 593.75,
        "y": 827.4999504089355,
        "wires": [
            [
                "ae903e683e45234b"
            ]
        ]
    },
    {
        "id": "e31a8e9b37a738e9",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "Recursive Data Extraction",
        "func": "\n// loop over data received from dataservice\nfor(i=0; i<msg.payload.data.length; i++){\n    let varData = msg.payload.data[i];\n    // concatenate actual databuffer with new data \n    msg.dataBuffer[varData.variableId] = msg.dataBuffer[varData.variableId].concat(varData.values);\n}\n\n// check if some data are still to be queried\nif (msg.payload.hasOwnProperty(\"hasMoreData\")) {\n    // create out for next query\n    let out = {\n        \"baseRoute\": msg.baseRoute,\n        \"from\": msg.payload.hasMoreData.from,\n        \"to\": msg.payload.hasMoreData.to,\n        \"dataBuffer\": msg.dataBuffer,\n        \"variablesNames\": msg.variablesNames,\n        \"variablesIds\": msg.variablesIds\n    };\n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Querying data in progress...\"\n    }};\n    \n    return [out, status, null];\n    \n}\nelse {\n    // change ids with names before sending databuffer \n    let newDataBuffer = {};\n    let numPoints = 0;\n    for(let i = 0; i < msg.variablesIds.length; i++)\n    {\n        newDataBuffer[msg.variablesNames[i]] = msg.dataBuffer[msg.variablesIds[i]];\n        numPoints += msg.dataBuffer[msg.variablesIds[i]].length\n    }\n    \n    // create final out\n    let out = {\n        \"payload\": newDataBuffer,\n        \"queryTime\": new Date().getTime() - flow.get(\"readStartTime\"),\n        \"variablesNames\": msg.variablesNames,\n        \"variablesIds\": msg.variablesIds\n    };\n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": new Date().toISOString() + \n                \"- Read \" + numPoints +\n                \" values from \" + msg.variablesIds.length +\n                \" variables in \" + out.queryTime/1000 + \"s.\"\n    }};\n\n    return [null, status, out]\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 800,
        "wires": [
            [
                "ae903e683e45234b"
            ],
            [
                "2259a6443f3d96d5"
            ],
            []
        ]
    },
    {
        "id": "01063d497886f837",
        "type": "exec",
        "z": "47c65435a62cd49d",
        "command": "[ -d \"./dscerts\" ] ",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 200,
        "y": 440,
        "wires": [
            [
                "2d377ed4909e4b5a"
            ],
            [],
            []
        ]
    },
    {
        "id": "5ebb08d62e5f0cd6",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "create cert command",
        "func": "// get ip from previous command\nlet nodeIpAddress = flow.get(\"nodeIpAddress\");\n\n// init out message\nlet out = {};\n\n// create dir, create root cert, create csr for client cert, create client cert\nlet createCertCommand = 'openssl genrsa -out ./dscerts/rootCAkey.pem 4096';\n\ncreateCertCommand += ' && openssl req -new -sha512 -key ./dscerts/rootCAkey.pem';\ncreateCertCommand += ' -config ./dscerts/rootCA.conf -out ./dscerts/rootCA.csr';\n \ncreateCertCommand += ' && openssl x509 -req -days 9999 -sha512 -in ./dscerts/rootCA.csr';\ncreateCertCommand += ' -signkey ./dscerts/rootCAkey.pem -out ./dscerts/rootCA.pem';\n\ncreateCertCommand += ' && openssl genrsa -out ./dscerts/clientkey.pem 4096';\n\ncreateCertCommand += ' && openssl req -new -sha512 -key ./dscerts/clientkey.pem';\ncreateCertCommand += ' -config /data/dscerts/client.conf -out ./dscerts/client.csr';\n\ncreateCertCommand += ' && openssl x509 -req -in ./dscerts/client.csr';\ncreateCertCommand += ' -CA ./dscerts/rootCA.pem -CAkey ./dscerts/rootCAkey.pem';\ncreateCertCommand += ' -CAcreateserial -out ./dscerts/client.pem -days 9999 -sha512';\ncreateCertCommand += ' -extfile <(printf \"subjectAltName=IP:' + nodeIpAddress + '\")';\n\nout.payload = createCertCommand;\n\nreturn out;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 480,
        "wires": [
            [
                "9cb7c21b7e4a146b"
            ]
        ]
    },
    {
        "id": "0228bcb18e06bf31",
        "type": "exec",
        "z": "47c65435a62cd49d",
        "command": "hostname -i",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 500,
        "wires": [
            [
                "c7c853873cbfbd44"
            ],
            [],
            []
        ]
    },
    {
        "id": "2d377ed4909e4b5a",
        "type": "switch",
        "z": "47c65435a62cd49d",
        "name": "rc code != 0",
        "property": "rc.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 500,
        "wires": [
            [
                "0228bcb18e06bf31"
            ]
        ]
    },
    {
        "id": "9cb7c21b7e4a146b",
        "type": "exec",
        "z": "47c65435a62cd49d",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 850,
        "y": 540,
        "wires": [
            [
                "fa02647aea2e5382"
            ],
            [],
            []
        ]
    },
    {
        "id": "d0314570b193a9c9",
        "type": "exec",
        "z": "47c65435a62cd49d",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "5ebb08d62e5f0cd6"
            ],
            [],
            []
        ]
    },
    {
        "id": "c7c853873cbfbd44",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "create Conf",
        "func": "// get ip from previous command\nlet nodeIpAddress = msg.payload.replace(/\\n/g, \"\");\nflow.set(\"nodeIpAddress\", nodeIpAddress);\n\n// init out\nlet out = {};\n\n// config file for rootCA certificate CSR\nlet CAcertConfText = '[req]\\n';\nCAcertConfText += 'distinguished_name = req_distinguished_name\\n';\nCAcertConfText += 'req_extensions = v3_req\\n';\nCAcertConfText += 'prompt = no\\n';\nCAcertConfText += '[req_distinguished_name]\\n';\nCAcertConfText += 'C = IT\\n';\nCAcertConfText += 'ST = IT\\n';\nCAcertConfText += 'L = Milan\\n';\nCAcertConfText += 'O = Siemens\\n';\nCAcertConfText += 'OU = DI FA SUP\\n';\nCAcertConfText += 'CN = IndustrialEdgeSelfSignedCA\\n';\nCAcertConfText += '[v3_req]\\n';\nCAcertConfText += 'keyUsage = keyEncipherment, dataEncipherment\\n';\nCAcertConfText += 'extendedKeyUsage = serverAuth\\n';\n\n// config file for client certificate CSR\nlet certConfText = '[req]\\n';\ncertConfText += 'distinguished_name = req_distinguished_name\\n';\ncertConfText += 'req_extensions = v3_req\\n';\ncertConfText += 'prompt = no\\n';\ncertConfText += '[req_distinguished_name]\\n';\ncertConfText += 'C = IT\\n';\ncertConfText += 'ST = IT\\n';\ncertConfText += 'L = Milan\\n';\ncertConfText += 'O = Siemens\\n';\ncertConfText += 'OU = DI FA SUP\\n';\ncertConfText += 'CN = dataserviceNodeRed\\n';\ncertConfText += '[v3_req]\\n';\ncertConfText += 'keyUsage = keyEncipherment, dataEncipherment\\n';\ncertConfText += 'extendedKeyUsage = serverAuth\\n';\ncertConfText += 'subjectAltName = @alt_names\\n';\ncertConfText += '[alt_names]\\n';\ncertConfText += 'IP = ' + nodeIpAddress + '\\n';\n\n// create cert folder and CSR conf files\nout.payload = 'mkdir -p ./dscerts';\nout.payload += ' && echo \"' + CAcertConfText + '\" > ./dscerts/rootCA.conf';\nout.payload += ' && echo \"' + certConfText + '\" > ./dscerts/client.conf';\n\nreturn out;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 540,
        "wires": [
            [
                "d0314570b193a9c9"
            ]
        ]
    },
    {
        "id": "6b76fa3b9042a1a8",
        "type": "comment",
        "z": "47c65435a62cd49d",
        "name": "search for cert folder",
        "info": "",
        "x": 238.74998474121094,
        "y": 387.4999408721924,
        "wires": []
    },
    {
        "id": "ecf0a90a21b59194",
        "type": "comment",
        "z": "47c65435a62cd49d",
        "name": "get ip of container",
        "info": "",
        "x": 449.99998474121094,
        "y": 446.2499656677246,
        "wires": []
    },
    {
        "id": "b0d70e4b395cd193",
        "type": "comment",
        "z": "47c65435a62cd49d",
        "name": "generate rootCA and client certs config",
        "info": "",
        "x": 465.00001525878906,
        "y": 591.2499828338623,
        "wires": []
    },
    {
        "id": "561819ded0c8b6ef",
        "type": "comment",
        "z": "47c65435a62cd49d",
        "name": "generate rootCA and client certs",
        "info": "",
        "x": 750,
        "y": 440,
        "wires": []
    },
    {
        "id": "0231123d43f9f84e",
        "type": "switch",
        "z": "47c65435a62cd49d",
        "name": "isRemoteIED?",
        "property": "readIsRemote",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 180,
        "wires": [
            [
                "c29ebb0c3ca6ceed"
            ],
            [
                "2acbe6a307341038"
            ]
        ]
    },
    {
        "id": "c29ebb0c3ca6ceed",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "Get Remote IED Login Token",
        "func": "// get remote URL,user and password from node configuration\nlet remoteURL = env.get(\"readRemoteURL\");\nlet remoteUser = env.get(\"readRemoteUser\");\nlet remotePass = env.get(\"readRemotePass\");\n\n// check validity of configuration properties\nif (remoteURL != \"\" && remoteUser != \"\" && remotePass != \"\")\n{\n    // init http request msg\n    let outMsg = {\"headers\": {}};\n    // set method\n    outMsg.method = \"POST\";\n    //set url\n    outMsg.url = \"https://\" + remoteURL + \"/device/edge/api/v1/login/direct\";\n    //set body\n    outMsg.payload = {\n      \"username\": remoteUser,\n      \"password\": remotePass\n    };\n    // set headers\n    const strJson = JSON.stringify(outMsg.payload);\n    const lenJson = Buffer.byteLength(strJson);\n    outMsg.headers['Content-Type'] = 'application/json';\n    \n    node.send([outMsg, null]);\n}\nelse\n{\n    // create status error message\n    let statusMsg = {\"payload\": {\n        \"fill\": \"red\",\n        \"shape\": \"dot\",\n        \"text\": \"Could not login to Remote IED: Missing configuration.\"\n    }};\n    \n    // reset IED token to null\n    flow.set(\"readIEDToken\", null);\n    \n    node.send([null, statusMsg]);\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "1982e9b0f4246ab7"
            ],
            [
                "6b04332a2dd7fea8"
            ]
        ]
    },
    {
        "id": "1982e9b0f4246ab7",
        "type": "http request",
        "z": "47c65435a62cd49d",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "aa74a00a8f723d14",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "c40e93a55213105c"
            ]
        ]
    },
    {
        "id": "6b04332a2dd7fea8",
        "type": "link out",
        "z": "47c65435a62cd49d",
        "name": "Parameter Login Remote IED",
        "mode": "link",
        "links": [
            "9d89e63e5d6cfb0f"
        ],
        "x": 555,
        "y": 140,
        "wires": []
    },
    {
        "id": "8ee12d014cc772b3",
        "type": "change",
        "z": "47c65435a62cd49d",
        "name": "remoteURL",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceReadUrl",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 120,
        "wires": [
            [
                "ab49eee5e1121115"
            ]
        ]
    },
    {
        "id": "c40e93a55213105c",
        "type": "function",
        "z": "47c65435a62cd49d",
        "name": "Set URL and IED Token with refresh",
        "func": "\n//check response\nif(msg.statusCode == 200)\n{\n    // set IED token to flow variable\n    flow.set(\"readIEDToken\", msg.payload.data.access_token);\n    \n    // get the ms for next token refresh\n    let refreshTokenTime = msg.payload.data.expires_in\n        - new Date().getTime()\n        - (3600 * 6 * 1000);\n    // send refresh token trigger after calculated ms\n    setTimeout(function() {\n        node.send([{}, null, null]);\n        }, refreshTokenTime);\n        \n    // get remote URL from node configuration\n    let remoteURL = env.get(\"readRemoteURL\");\n    // create and send dataservice remote URL\n    let remoteDataserviceURL = \"https://\" + remoteURL + \"/dataservice\";\n    node.send([null, null, {\"payload\": remoteDataserviceURL}]);\n}\nelse\n{\n    // create status error message\n    let statusMsg = {\"payload\": {\n        \"fill\": \"red\",\n        \"shape\": \"dot\",\n        \"text\": \"Could not login to Remote IED: \" + msg.payload.errors[0].message\n    }};\n    \n    // reset IED token to null\n    flow.set(\"readIEDToken\", null);\n    \n    node.send([null, statusMsg, null]);    \n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 40,
        "wires": [
            [
                "73128b5cbee7b2ad"
            ],
            [
                "f67f90feda23462c"
            ],
            [
                "8ee12d014cc772b3"
            ]
        ]
    },
    {
        "id": "3cf37741633dd3cb",
        "type": "switch",
        "z": "47c65435a62cd49d",
        "name": "isRemoteIED?",
        "property": "readIsRemote",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 740,
        "wires": [
            [
                "b4ef46d44e0af1f8"
            ],
            [
                "bf78ddf47e51e797"
            ]
        ]
    },
    {
        "id": "b4ef46d44e0af1f8",
        "type": "switch",
        "z": "47c65435a62cd49d",
        "name": "IEDToken?",
        "property": "readIEDToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 680,
        "wires": [
            [
                "bf78ddf47e51e797"
            ]
        ]
    },
    {
        "id": "f67f90feda23462c",
        "type": "link out",
        "z": "47c65435a62cd49d",
        "name": "Status Login Remote IED",
        "mode": "link",
        "links": [
            "9d89e63e5d6cfb0f"
        ],
        "x": 1055,
        "y": 80,
        "wires": []
    },
    {
        "id": "9d89e63e5d6cfb0f",
        "type": "link in",
        "z": "47c65435a62cd49d",
        "name": "Status Output",
        "links": [
            "2259a6443f3d96d5",
            "c979df9438ad2b21",
            "6b04332a2dd7fea8",
            "f67f90feda23462c"
        ],
        "x": 55,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "963a27dc3cb671c9",
        "type": "http request",
        "z": "47c65435a62cd49d",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "aa74a00a8f723d14",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "60f737c3c5ba7d1b"
            ]
        ]
    },
    {
        "id": "e90e553a8347dc32",
        "type": "http request",
        "z": "47c65435a62cd49d",
        "name": "http",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 810,
        "y": 300,
        "wires": [
            [
                "d6b2dea04eaafc5c"
            ]
        ]
    },
    {
        "id": "d49b288521e1f43c",
        "type": "http request",
        "z": "47c65435a62cd49d",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "aa74a00a8f723d14",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 810,
        "y": 340,
        "wires": [
            [
                "d6b2dea04eaafc5c"
            ]
        ]
    },
    {
        "id": "2259a6443f3d96d5",
        "type": "link out",
        "z": "47c65435a62cd49d",
        "name": "Data Extraction Status",
        "mode": "link",
        "links": [
            "9d89e63e5d6cfb0f"
        ],
        "x": 1035,
        "y": 800,
        "wires": []
    },
    {
        "id": "c979df9438ad2b21",
        "type": "link out",
        "z": "47c65435a62cd49d",
        "name": "Variables Map Status",
        "mode": "link",
        "links": [
            "9d89e63e5d6cfb0f"
        ],
        "x": 1135,
        "y": 320,
        "wires": []
    },
    {
        "id": "620b876656721be6",
        "type": "comment",
        "z": "47c65435a62cd49d",
        "name": "login to remote IED URL and get token",
        "info": "",
        "x": 430,
        "y": 40,
        "wires": []
    },
    {
        "id": "31fb5662400e9328",
        "type": "comment",
        "z": "47c65435a62cd49d",
        "name": "connect directly to local IED Dataservice",
        "info": "",
        "x": 337.49998474121094,
        "y": 281.24997901916504,
        "wires": []
    },
    {
        "id": "02cbfd0b044416aa",
        "type": "comment",
        "z": "47c65435a62cd49d",
        "name": "map assets and variables",
        "info": "",
        "x": 1054.9999237060547,
        "y": 268.7499771118164,
        "wires": []
    },
    {
        "id": "96d995f566ad381b",
        "type": "comment",
        "z": "47c65435a62cd49d",
        "name": "check conditions",
        "info": "",
        "x": 180,
        "y": 800,
        "wires": []
    },
    {
        "id": "9633c620bce38998",
        "type": "http request",
        "z": "47c65435a62cd49d",
        "name": "http",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 970,
        "y": 680,
        "wires": [
            [
                "e31a8e9b37a738e9"
            ]
        ]
    },
    {
        "id": "9c82cca98ac52213",
        "type": "http request",
        "z": "47c65435a62cd49d",
        "name": "https",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "aa74a00a8f723d14",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 970,
        "y": 720,
        "wires": [
            [
                "e31a8e9b37a738e9"
            ]
        ]
    },
    {
        "id": "4073805feb1077ee",
        "type": "comment",
        "z": "47c65435a62cd49d",
        "name": "get data recursevely",
        "info": "",
        "x": 790,
        "y": 860,
        "wires": []
    },
    {
        "id": "fa02647aea2e5382",
        "type": "link out",
        "z": "47c65435a62cd49d",
        "name": "Certs out",
        "mode": "link",
        "links": [
            "7eff9c0247ed5cfb"
        ],
        "x": 955,
        "y": 520,
        "wires": []
    },
    {
        "id": "7eff9c0247ed5cfb",
        "type": "link in",
        "z": "47c65435a62cd49d",
        "name": "Remote IED Token",
        "links": [
            "73128b5cbee7b2ad",
            "fa02647aea2e5382"
        ],
        "x": 215,
        "y": 120,
        "wires": [
            [
                "c29ebb0c3ca6ceed"
            ]
        ]
    },
    {
        "id": "73128b5cbee7b2ad",
        "type": "link out",
        "z": "47c65435a62cd49d",
        "name": "Token Refresh Output",
        "mode": "link",
        "links": [
            "7eff9c0247ed5cfb"
        ],
        "x": 1055,
        "y": 40,
        "wires": []
    },
    {
        "id": "aa74a00a8f723d14",
        "type": "tls-config",
        "z": "47c65435a62cd49d",
        "name": "DataServiceTLS",
        "cert": "./dscerts/client.pem",
        "key": "./dscerts/clientkey.pem",
        "ca": "./dscerts/rootCA.pem",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "ba048851b7230de7",
        "type": "tab",
        "label": "Data Service",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cabc3001226d0a31",
        "type": "inject",
        "z": "ba048851b7230de7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 320,
        "wires": [
            [
                "7e8a2ee7bab56d01"
            ]
        ]
    },
    {
        "id": "7e8a2ee7bab56d01",
        "type": "change",
        "z": "ba048851b7230de7",
        "name": "getDateFromDashboard",
        "rules": [
            {
                "t": "set",
                "p": "from",
                "pt": "msg",
                "to": "from",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "to",
                "pt": "msg",
                "to": "to",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 320,
        "wires": [
            [
                "1d519e36932386fe"
            ]
        ]
    },
    {
        "id": "72fbb1d4871ffdd0",
        "type": "ui_chart",
        "z": "ba048851b7230de7",
        "name": "",
        "group": "918d230342c74806",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Production Trend",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "500000",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1c84ce",
            "#ed2c2f",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "2dc58c41a73f208d"
            ]
        ]
    },
    {
        "id": "8363d43c1dbbd0c7",
        "type": "function",
        "z": "ba048851b7230de7",
        "name": "Create chart msg",
        "func": "// create base out message\nlet outMsg = {payload:[{}]};\nlet outSeries = [];\nlet tags = Object.keys(msg.payload);\n\nfor(i=0;i<tags.length;i++){\n    outSeries.push(tags[i]);\n}\n\n// create chart properties\noutMsg.payload[0].series = outSeries;\noutMsg.payload[0].labels = [\"\"];\noutMsg.payload[0].data = [];\n\n// create time series\nfor(i=0;i<tags.length;i++){\n    let data = Object.values(msg.payload)[i];\n    let name = Object.keys(msg.payload)[i];\n    outMsg.payload[0].data[i] = [];\n    for (j=0;j<data.length;j++){\n        let ts = new Date(data[j].timestamp).getTime();\n        outMsg.payload[0].data[i].push({\"x\": ts, \"y\": data[j].value});  \n    }\n}\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "72fbb1d4871ffdd0"
            ]
        ],
        "info": "The aim of this node is to prepare the data received from \"DataService Read Variable\" node, in order to visualize them into a dedicated dashboard.\n\nThe time series data format will be the following:\n\n[{\n\"series\": [\"VarA\", \"VarB\", \"VarC\"],\n\"data\": [\n    [{ \"x\": \"20/10/2021 20:50:50\", \"y\": 5 },\n     { \"x\": \"20/10/2021 20:50:50\", \"y\": 6 },\n     { \"x\": \"20/10/2021 20:50:50\", \"y\": 7 }\n    ],\n    ...,\n    [{ \"x\": \"20/10/2021 20:51:50\", \"y\": 8 },\n     { \"x\": \"20/10/2021 20:51:50\", \"y\": 9 },\n     { \"x\": \"20/10/2021 20:51:50\", \"y\": 10 }\n    ]\n],\n\"labels\": [\"\"]\n}]\n\nThe graph in the dasboard will show the timestamps on the x-axis and the values of the tags on the y-axis."
    },
    {
        "id": "e759c4c4e1f7931c",
        "type": "comment",
        "z": "ba048851b7230de7",
        "name": "Show on UI",
        "info": "",
        "x": 1050,
        "y": 280,
        "wires": []
    },
    {
        "id": "2429043895b23f2a",
        "type": "ui_button",
        "z": "ba048851b7230de7",
        "name": "",
        "group": "918d230342c74806",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Get Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "7e8a2ee7bab56d01"
            ]
        ]
    },
    {
        "id": "6f90dfe5e58a756b",
        "type": "change",
        "z": "ba048851b7230de7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "from",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 140,
        "wires": [
            [
                "140e2824218a05d5"
            ]
        ]
    },
    {
        "id": "329ba13270bfca17",
        "type": "change",
        "z": "ba048851b7230de7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "to",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 180,
        "wires": [
            [
                "618932295b951bd7"
            ]
        ]
    },
    {
        "id": "8863ee3a212131c7",
        "type": "inject",
        "z": "ba048851b7230de7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "e1c40a9d736c0b9b"
            ]
        ]
    },
    {
        "id": "852e418c09912b2b",
        "type": "ui_date_picker",
        "z": "ba048851b7230de7",
        "name": "",
        "label": "From",
        "group": "bf34f3796d0a3c50",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "from",
        "x": 510,
        "y": 140,
        "wires": [
            [
                "6f90dfe5e58a756b"
            ]
        ]
    },
    {
        "id": "efdeb363ac0fd0b3",
        "type": "ui_date_picker",
        "z": "ba048851b7230de7",
        "name": "",
        "label": "to",
        "group": "7d508c6e431c7fc7",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "to",
        "x": 510,
        "y": 180,
        "wires": [
            [
                "329ba13270bfca17"
            ]
        ]
    },
    {
        "id": "e1c40a9d736c0b9b",
        "type": "function",
        "z": "ba048851b7230de7",
        "name": "Default time range",
        "func": "let out1 = {\"payload\": new Date(msg.payload - 1000*60*60*1)};\nlet out2 = {\"payload\": new Date(msg.payload)};\n\nreturn [out1, out2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 160,
        "wires": [
            [
                "852e418c09912b2b"
            ],
            [
                "efdeb363ac0fd0b3"
            ]
        ]
    },
    {
        "id": "140e2824218a05d5",
        "type": "debug",
        "z": "ba048851b7230de7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 140,
        "wires": []
    },
    {
        "id": "618932295b951bd7",
        "type": "debug",
        "z": "ba048851b7230de7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 180,
        "wires": []
    },
    {
        "id": "1b1502d83e318687",
        "type": "comment",
        "z": "ba048851b7230de7",
        "name": "Select time interval",
        "info": "",
        "x": 110,
        "y": 120,
        "wires": []
    },
    {
        "id": "e518b9b49d8d4088",
        "type": "comment",
        "z": "ba048851b7230de7",
        "name": "Extract data from Data Service App",
        "info": "",
        "x": 160,
        "y": 280,
        "wires": []
    },
    {
        "id": "23487b0a4ddcb3e5",
        "type": "comment",
        "z": "ba048851b7230de7",
        "name": "Export CSV file",
        "info": "",
        "x": 1060,
        "y": 460,
        "wires": []
    },
    {
        "id": "1d29cfca72a6933e",
        "type": "comment",
        "z": "ba048851b7230de7",
        "name": "Variables of interest to be defined in this node",
        "info": "",
        "x": 610,
        "y": 280,
        "wires": []
    },
    {
        "id": "5607bac6acd42029",
        "type": "csv",
        "z": "ba048851b7230de7",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1030,
        "y": 540,
        "wires": [
            [
                "8458c07ac8ab94af"
            ]
        ]
    },
    {
        "id": "a365e171cbe733ca",
        "type": "function",
        "z": "ba048851b7230de7",
        "name": "CSV data arrangement",
        "func": "let data = {\"timestamp\": []};\n\nfor(i=0;i<Object.keys(msg.payload).length;i++){\n    let variable = Object.values(msg.payload)[i];\n    for (j=0;j<variable.length;j++){\n        let newTs = new Date(variable[j].timestamp).getTime()\n        if(data.timestamp.indexOf(newTs) == -1){\n            data.timestamp.push(newTs);  \n        }\n    }\n}\n\ndata.timestamp.sort((a,b)=>a-b).map((el) => {return new Date(el)});\n\nfor(k=0;k<data.timestamp.length;k++){\n    data.timestamp[k] = new Date(parseInt(data.timestamp[k])).toISOString();\n}\n\nfor(i=0;i<Object.keys(msg.payload).length;i++){\n    data[Object.keys(msg.payload)[i]] = new Array(data.timestamp.length).fill(null);\n    let variable = Object.values(msg.payload)[i];\n    for(j=0;j<variable.length;j++){\n        let index = data.timestamp.indexOf(variable[j].timestamp);\n        if(index > -1){\n            data[Object.keys(msg.payload)[i]][index] = variable[j].value\n        }    \n    }\n}\n\nlet buffer = [];\n// Go through all data elements and organize them as [{a: \"\", b: \"\"}, {a: \"\", b: \"\"},...,{a: \"\", b: \"\"}]\nfor(i=0;i<data.timestamp.length;i++){\n    let newRow = {\"timestamp\": data.timestamp[i]};\n    let columns = Object.keys(msg.payload);\n    for(j=0;j<columns.length;j++){\n        newRow[Object.keys(msg.payload)[j]] = data[Object.keys(msg.payload)[j]][i];\n    }\n    buffer.push(newRow);\n}\n\n// Define CSV columns name\nmsg.columns = Object.keys(data).join(\",\");\nmsg.payload = buffer;\nmsg.topic = env.get(\"variablesName\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 500,
        "wires": [
            [
                "5607bac6acd42029",
                "854014c83fb8b1ba"
            ]
        ],
        "info": "The aim of this node is to format the data recevied from \"DataService Read Variables\" node, in order to create and save a CSV file with all the datapoints extracted from the Data Service database.\n\nThe CSV file format will be the following:\n\n|timestamp|VarA|VarB|...|VarC|\n|.........|....|....|...|....|\n|.........|....|....|...|....|\n|.........|....|....|...|....|"
    },
    {
        "id": "406dfdb3c5bbec6e",
        "type": "comment",
        "z": "ba048851b7230de7",
        "name": "DATA SERVICE APPLICATION EXAMPLE",
        "info": "",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "8458c07ac8ab94af",
        "type": "file",
        "z": "ba048851b7230de7",
        "name": "write to file",
        "filename": "/data/_report/csvdataextract.csv",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1170,
        "y": 540,
        "wires": [
            [
                "101b2f38291f010f"
            ]
        ],
        "info": "Save a CSV with filename **csvdataextract.csv** containing all the datapoints extracted from Data Service application."
    },
    {
        "id": "101b2f38291f010f",
        "type": "debug",
        "z": "ba048851b7230de7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 580,
        "wires": []
    },
    {
        "id": "2dc58c41a73f208d",
        "type": "debug",
        "z": "ba048851b7230de7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 400,
        "wires": []
    },
    {
        "id": "589e9323d1d7e28d",
        "type": "debug",
        "z": "ba048851b7230de7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 440,
        "wires": []
    },
    {
        "id": "cbf17c7b27d629f2",
        "type": "file",
        "z": "ba048851b7230de7",
        "name": "write to file",
        "filename": "/home/nodered/node-red-home/_report/csvdataextract.csv",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1170,
        "y": 620,
        "wires": [
            []
        ],
        "info": "Save a CSV with filename **csvdataextract.csv** containing all the datapoints extracted from Data Service application."
    },
    {
        "id": "854014c83fb8b1ba",
        "type": "debug",
        "z": "ba048851b7230de7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 440,
        "wires": []
    },
    {
        "id": "1d519e36932386fe",
        "type": "subflow:47c65435a62cd49d",
        "z": "ba048851b7230de7",
        "name": "",
        "env": [
            {
                "name": "readVariablesNames",
                "value": "Production.Production.GoodPieces,Production.Production.BadPieces,Production.Production.MachSpeedSeconds",
                "type": "str"
            },
            {
                "name": "readRemotePass",
                "type": "cred"
            }
        ],
        "x": 610,
        "y": 320,
        "wires": [
            [
                "589e9323d1d7e28d",
                "8363d43c1dbbd0c7"
            ]
        ]
    },
    {
        "id": "918d230342c74806",
        "type": "ui_group",
        "name": "Default",
        "tab": "6d97e5d7c8f73ec7",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "bf34f3796d0a3c50",
        "type": "ui_group",
        "name": "From",
        "tab": "6d97e5d7c8f73ec7",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7d508c6e431c7fc7",
        "type": "ui_group",
        "name": "To",
        "tab": "6d97e5d7c8f73ec7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6d97e5d7c8f73ec7",
        "type": "ui_tab",
        "name": "DatetimePicker",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    }
]