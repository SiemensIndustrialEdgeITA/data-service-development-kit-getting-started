[
    {
        "id": "a3aef14032aa8402",
        "type": "subflow",
        "name": "DataService Write",
        "info": "# DataService Write Variables\n\nSubflow that implements all the APIs needed to Write variables data to DataService Edge App.\n\n### Input Message\n\nTo write one or more variables, the input message has to be an **Array of Objects** where **variableName** and **values** properties has to be specified fo each variable to write.\n\nThe property **variablesName** has to be in the format `\"asset_name\".\"variable_name\"`.\nFor example, to write a variable called **CH1** in the Asset **MyDevice** use **MyDevice.CH1**.\n\nThe property **values** is an array of object where each datapoint **value**, **timestamp** and **qualitycode** properties has to be specified.\nThe timestamp property has to be in ISO Format (e.g. `2022-08-11T13:48:34.064Z`).\nUse the qualitycode property `192` for writing good datapoints.\n\n**Example input:**\n\n```json\n[\n    {\n        \"variableName\":\"MyDevice.CH1\",\n        \"values\":[\n            {\n                \"qualitycode\":192,\n                \"timestamp\":\"2022-08-11T13:48:34.064Z\",\n                \"value\":114\n            }\n        ]\n    },\n    {\n        \"variableName\":\"MyDevice.CH2\",\n        \"values\":[\n            {\n            \"qualitycode\":192,\n            \"timestamp\":\"2022-08-11T13:48:34.064Z\",\n            \"value\":100\n            }\n        ]\n    }\n]\n```\n\n### Output\n\nThe node will return a messsage with the following properties:\n\n- **payload:** `true` if data write is successfully, `false` if there was an error.\n- **queryTime:** number of milliseconds elapsed for the write query\n- **variablesNames:** array of the requested variables\n- **variablesIds:** array of ids of the requested variables \n\n**Example output:**\n\n```json\n{\n    \"payload\": true,\n    \"queryTime\":482,\n    \"variablesNames\":[\n        \"MyDevice.CH1\",\n        \"MyDevice.CH2\"\n    ],\n    \"variablesIds\":[\n        \"56b571010bac431e91cd7f5bd9abef7c\",\n        \"ca0c7878698e4885a09782f02516ab35\"\n    ]\n}\n```\n\n",
        "category": "DataService",
        "in": [
            {
                "x": 100,
                "y": 340,
                "wires": [
                    {
                        "id": "6727be51c0f66cdc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 520,
                "wires": [
                    {
                        "id": "ce93ae50a5102796",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "DataServiceWriteVariables",
            "version": "0.0.2",
            "desc": "Subflow that implements all the APIs needed to Write variables data to DataService Edge App",
            "keywords": "dataservice, variables, write",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 1140,
            "y": 360,
            "wires": [
                {
                    "id": "64359736a111ec83",
                    "port": 0
                },
                {
                    "id": "cfaa8e97253ec65e",
                    "port": 0
                },
                {
                    "id": "ce93ae50a5102796",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "382604d1845962c0",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Create Token Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceWriteUrl\") + \"/TokenManagerService/oauth/token\";\n\n//set body\nmsg.payload = {\n    \"appName\": \"edgeappdataservice\",\n    \"appVersion\": \"1.1\",\n    \"hostTenant\": \"edge\",\n    \"userTenant\": \"edge\"\n    };\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\n// set auth header\nlet authStr = flow.get(\"dataserviceWriteUser\") + \":\" + flow.get(\"dataserviceWritePass\");\nlet basicOut = Buffer.from(authStr).toString('base64');\nmsg.headers['X-SPACE-AUTH-KEY'] = 'Basic ' + basicOut;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 140,
        "wires": [
            [
                "48559fefeda04550"
            ]
        ]
    },
    {
        "id": "48559fefeda04550",
        "type": "http request",
        "z": "a3aef14032aa8402",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 140,
        "wires": [
            [
                "5cd11b6dccc2e5ff"
            ]
        ]
    },
    {
        "id": "b4b5d4c2525bd852",
        "type": "inject",
        "z": "a3aef14032aa8402",
        "name": "At Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "5d070ad37fad5b36"
            ]
        ]
    },
    {
        "id": "5cd11b6dccc2e5ff",
        "type": "change",
        "z": "a3aef14032aa8402",
        "name": "set accessToken",
        "rules": [
            {
                "t": "set",
                "p": "writeAccessToken",
                "pt": "flow",
                "to": "payload.access_token",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 140,
        "wires": [
            [
                "f8ba8b820695cc9c"
            ]
        ]
    },
    {
        "id": "f91846b50c3b1252",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Create Data Request",
        "func": "// init msg\nlet outMsg = {\"headers\": {}};\n\n// set method\noutMsg.method = \"POST\";\n\n// set baseRoute\noutMsg.baseRoute = msg.baseRoute;\n//set url\noutMsg.url = msg.baseRoute;\n\n// set token header\noutMsg.headers[\"authorization\"] = flow.get(\"writeAccessToken\");\n\n// MAX NUMBER OF POINTS TO BE SENT WITH ONE REQUEST\nlet maxPoints = 20000;\n\n// init new databuffer\noutMsg.dataBuffer = [];\n// init payload to be written\noutMsg.payload = [];\n\n// copy writestats\noutMsg.writeStats = msg.writeStats;\n\n// get the number of variables remaining to be sent\nlet numVariables = msg.dataBuffer.length;\n// get max points for each variable based on total max points\nlet maxPointsVariable = maxPoints / numVariables;\n\n// for each tag in databuffer\nfor (let i = 0; i < msg.dataBuffer.length; i++)\n{\n    // push write data structure to payload\n    outMsg.payload.push({\n        \"variableId\" : msg.dataBuffer[i].variableId,\n        \"values\": []\n    })\n    // get the act last index of payload\n    let payloadLastIndex = outMsg.payload.length - 1;\n    \n    // check how many points remain to be sent for act variable\n    if(msg.dataBuffer[i].values.length > maxPointsVariable)\n    {\n        // take first N points from databuffer\n        let valsToSend = msg.dataBuffer[i].values.splice(0, maxPointsVariable);\n        // set them to payload\n        outMsg.payload[payloadLastIndex].values = valsToSend;\n        // push the remaining points to new databuffer for next request\n        outMsg.dataBuffer.push(msg.dataBuffer[i]);\n        \n        // update number of points sent\n        outMsg.writeStats.totWritePoints += maxPointsVariable;\n        \n    }\n    else\n    {\n        // push all the points to payload\n        outMsg.payload[payloadLastIndex].values = msg.dataBuffer[i].values;\n        \n        // update number of points sent\n        outMsg.writeStats.totWritePoints += msg.dataBuffer[i].values.length;\n    }\n}\n\nreturn outMsg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "4938c1a4e33ff7c6"
            ]
        ]
    },
    {
        "id": "4938c1a4e33ff7c6",
        "type": "http request",
        "z": "a3aef14032aa8402",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 850,
        "y": 440,
        "wires": [
            [
                "ce93ae50a5102796"
            ]
        ]
    },
    {
        "id": "a82b71868ba2f65f",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Create Var Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceWriteUrl\") + \"/DataService/Variables\";\n\n// set token header\nmsg.headers[\"authorization\"] = flow.get(\"writeAccessToken\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 260,
        "wires": [
            [
                "15bb6be32c9963c9"
            ]
        ]
    },
    {
        "id": "15bb6be32c9963c9",
        "type": "http request",
        "z": "a3aef14032aa8402",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "64359736a111ec83"
            ]
        ]
    },
    {
        "id": "64359736a111ec83",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Set variablesMap",
        "func": "// create out message\nlet outMsg = {\"payload\": {\n      \"fill\": \"red\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected but no variables found in DataService.\"\n}};\n\n// get the assets map\nlet assetsMap = flow.get(\"writeAssetsMap\");\n\n// init variables Map\nlet variablesMap = {};\n\n// iterate through variables in dataservice\nfor(let i = 0; i < msg.payload.variables.length; i++){\n    // create variable name as assetName.variableName\n    let varName = assetsMap[msg.payload.variables[i].assetId] + \".\" + msg.payload.variables[i].variableName;\n\n    // set variables map as varName : varId\n    variablesMap[varName] = msg.payload.variables[i].variableId;\n}\n\n\nif (Object.keys(variablesMap).length > 0) {\n    flow.set(\"writeVariablesMap\", variablesMap);\n    // set status\n    outMsg.payload = {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected and Configured for writing, \" + Object.keys(variablesMap).length + \" variables found in DataService.\"\n    };\n}\nelse\n{\n    flow.set(\"writeVariablesMap\", null);\n}\n\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "f8ba8b820695cc9c",
        "type": "switch",
        "z": "a3aef14032aa8402",
        "name": "accessToken?",
        "property": "writeAccessToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "5fad6a83956dbdf8"
            ]
        ]
    },
    {
        "id": "6727be51c0f66cdc",
        "type": "switch",
        "z": "a3aef14032aa8402",
        "name": "accessToken?",
        "property": "writeAccessToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 340,
        "wires": [
            [
                "30205e4b6b422d74"
            ]
        ]
    },
    {
        "id": "30205e4b6b422d74",
        "type": "switch",
        "z": "a3aef14032aa8402",
        "name": "variablesMap?",
        "property": "writeVariablesMap",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 380,
        "wires": [
            [
                "cfaa8e97253ec65e"
            ]
        ]
    },
    {
        "id": "3c40304b2bceb27f",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Create User",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceWriteUrl\") + \"/TokenManagerService/users\";\n\nlet user = flow.get(\"dataserviceWriteUser\");\nlet password = flow.get(\"dataserviceWritePass\");\n\n//set body\nmsg.payload = {\n      userName: user,\n      passWord: password,\n      familyName: \"myFamily\" + user,\n      givenName: user,\n      email: user + \"@myemail.com\",\n      roles: [\n        {\n          application: \"edgeappdataservice\",\n          role: \"admin\"\n        }]};\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "bef5a5b4f8f34d18"
            ]
        ]
    },
    {
        "id": "bef5a5b4f8f34d18",
        "type": "http request",
        "z": "a3aef14032aa8402",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 80,
        "wires": [
            [
                "382604d1845962c0"
            ]
        ]
    },
    {
        "id": "5d070ad37fad5b36",
        "type": "change",
        "z": "a3aef14032aa8402",
        "name": "url, user, pass",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceWriteUrl",
                "pt": "flow",
                "to": "http://edgeappdataservice:4203",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dataserviceWriteUser",
                "pt": "flow",
                "to": "nodeWriteUser",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dataserviceWritePass",
                "pt": "flow",
                "to": "nodeWritePass",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 80,
        "wires": [
            [
                "3c40304b2bceb27f"
            ]
        ]
    },
    {
        "id": "5fad6a83956dbdf8",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Create Asset Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceWriteUrl\") + \"/AssetService/Assets\";\n\n// set token header\nmsg.headers[\"authorization\"] = flow.get(\"writeAccessToken\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 200,
        "wires": [
            [
                "7b9139507abeb244"
            ]
        ]
    },
    {
        "id": "7b9139507abeb244",
        "type": "http request",
        "z": "a3aef14032aa8402",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 200,
        "wires": [
            [
                "771024ead9669552"
            ]
        ]
    },
    {
        "id": "771024ead9669552",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Set assetsMap",
        "func": "// init assets list\nlet assetsMap = {};\n\nfor(i=0; i < msg.payload.assets.length; i++){\n    // for each asset set a key:value property as id:name\n    assetsMap[msg.payload.assets[i].assetId] = msg.payload.assets[i].name;\n}\n\n// set assets list as flow tag\nflow.set(\"writeAssetsMap\", assetsMap);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 200,
        "wires": [
            [
                "a82b71868ba2f65f"
            ]
        ]
    },
    {
        "id": "cfaa8e97253ec65e",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Init Request",
        "func": "// init variablesNames and Ids\nconst variablesMap = flow.get(\"writeVariablesMap\");\nconst variablesNames = Object.keys(variablesMap);\nconst variablesIds = Object.values(variablesMap);\n\n// init databuffer\nmsg.dataBuffer = [];\n\n// init write stats\nmsg.writeStats = {\n    \"variablesNames\": [],\n    \"variablesIds\": [],\n    \"variablesNum\" : 0,\n    \"totWritePoints\" : 0,\n    \"totPoints\": 0\n};\n\n// substitute varName with varId\nfor (let i = 0; i < msg.payload.length; i++)\n{\n    // search the requested var name in var map\n    let varIndex = variablesNames.indexOf(msg.payload[i].variableName);\n    if(varIndex != -1)\n    {\n        // if found, push variable and values to databuffer\n        msg.dataBuffer.push({\n            \"variableId\": variablesIds[varIndex],\n            \"values\": msg.payload[i].values\n        });\n        \n        // write stats\n        msg.writeStats.variablesNames.push(msg.payload[i].variableName);\n        msg.writeStats.variablesIds.push(variablesIds[varIndex]);\n        msg.writeStats.variablesNum++;\n        msg.writeStats.totPoints += msg.payload[i].values.length;\n    }\n}\n\n// init baseRoute\nmsg.baseRoute = flow.get(\"dataserviceWriteUrl\") + \"/DataService/Data\";\n\n\n\n// if all requested tags are found in variable map\nif (msg.dataBuffer.length == msg.payload.length)\n{\n    flow.set(\"writeStartTime\", new Date().getTime());\n    \n    return [null, msg];\n}\nelse\n{\n    let status = {\"payload\": {\n          \"fill\": \"red\",\n          \"shape\": \"dot\",\n          \"text\": \"Error, some variables name was not found.\"\n    }};\n    \n    // return error message\n    return[status, null];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 360,
        "wires": [
            [],
            [
                "f91846b50c3b1252"
            ]
        ]
    },
    {
        "id": "ce93ae50a5102796",
        "type": "function",
        "z": "a3aef14032aa8402",
        "name": "Recursive Data Writing",
        "func": "\n\n// check if payload has the success prop\nif (msg.payload.hasOwnProperty(\"success\")) {\n    // and if success is true\n    if (msg.payload.success == true) {\n        \n        if(msg.dataBuffer.length > 0)\n        {\n            // create out for next query\n            let out = {\n                \"baseRoute\": msg.baseRoute,\n                \"dataBuffer\": msg.dataBuffer,\n                \"writeStats\": msg.writeStats\n            };\n        \n            \n            // create status message\n            let status = {\"payload\": {\n              \"fill\": \"green\",\n              \"shape\": \"dot\",\n              \"text\": \"Written \" + msg.writeStats.totWritePoints + \" of \" + msg.writeStats.totPoints + \" values...\"\n            }};\n            \n            return [out, status, null];\n        }\n        else \n        { \n            let numPoints = 0;\n\n            // create final out\n            let out = {\n                \"payload\": true,\n                \"queryTime\": new Date().getTime() - flow.get(\"writeStartTime\"),\n                \"variablesNames\": msg.writeStats.variablesNames,\n                \"variablesIds\": msg.writeStats.variablesIds\n            };\n            // create status message\n            let status = {\"payload\": {\n              \"fill\": \"green\",\n              \"shape\": \"dot\",\n              \"text\": new Date().toISOString() + \n                        \"- Write \" + msg.writeStats.totWritePoints +\n                        \" values for \" + msg.writeStats.variablesNum +\n                        \" variables in \" + out.queryTime/1000 + \"s.\"\n            }};\n        \n            return [null, status, out]\n        }\n    }\n    else\n    {\n        // create out message\n        let out = {\n                \"payload\": false,\n                \"queryTime\": new Date().getTime() - flow.get(\"writeStartTime\"),\n                \"variablesNames\": msg.writeStats.variablesNames,\n                \"variablesIds\": msg.writeStats.variablesIds\n        };\n        // create status message\n        let status = {\"payload\": {\n          \"fill\": \"red\",\n          \"shape\": \"dot\",\n          \"text\": \"Error writing data.\"\n        }};\n        \n        return [null, status, out];        \n    }\n}\nelse\n{\n    // create out message\n    let out = {\n            \"payload\": false,\n            \"queryTime\": new Date().getTime() - flow.get(\"writeStartTime\"),\n            \"variablesNames\": msg.writeStats.variablesNames,\n            \"variablesIds\": msg.writeStats.variablesIds\n    };\n    \n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"red\",\n      \"shape\": \"dot\",\n      \"text\": \"Error writing data.\"\n    }};\n    \n    return [null, status, out];   \n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 520,
        "wires": [
            [
                "f91846b50c3b1252"
            ],
            [],
            []
        ]
    },
    {
        "id": "38742bb91ad9d5fc",
        "type": "subflow",
        "name": "DataService Read",
        "info": "# DataService Read Variables\n\nSubflow that implements all the APIs needed to read variables data from DataService Edge App based on their **names**, a **from date** and a **to date**.\n\n### Configuration\n\nConfigure the variables names to be readed in the property **Variables Names** of the node in the format `asset_name.variable_name` separated by commas (no spaces between names and commas, e.g. `MyDevice.CH1,MyDevice.CH2`).\nFor example, to read a variable called **CH1** from the Asset **MyDevice** use **MyDevice.CH1**.\n\n### Input Message\n\nSend the start and end time of the data query by the properties **from** and **to** in the input message.\nBoth dates has to be in ISO Format (e.g. `2022-08-11T13:48:34.064Z`).\n\n**Example input:**\n\n```json\n{\n    \"from\": \"2021-10-10T15:00:00.000Z\",\n    \"to\": \"2021-10-10T20:00:00.000Z\"\n}\n```\n\n### Output\n\nThe node will return a message with the following properties:\n\n- **payload:** object that contains the values and timestamps for each requested variable\n- **queryTime:** number of milliseconds elapsed for the query\n- **variablesNames:** array of the requested variables\n- **variablesIds:** array of ids of the requested variables \n\n**Example output:**\n\n```json\n{\n    \"payload\":{\n        \"MyDevice.CH1\":[\n            {\n                \"timestamp\":\"2022-08-10T11:42:54.506Z\",\n                \"value\":11697,\n                \"qualitycode\":192\n            },\n            {\n                \"timestamp\":\"2022-08-10T11:42:55.506Z\",\n                \"value\":14829,\n                \"qualitycode\":192\n            }\n        ],\n        \"MyDevice.CH2\":[\n            {\n                \"timestamp\":\"2022-08-10T11:42:54.506Z\",\n                \"value\":12514,\n                \"qualitycode\":192\n            },\n            {\n                \"timestamp\":\"2022-08-10T11:42:55.506Z\",\n                \"value\":11298,\n                \"qualitycode\":192\n            }\n        ]},\n        \"queryTime\":482,\n        \"variablesNames\":[\n            \"MyDevice.CH1\",\n            \"MyDevice.CH2\"\n        ],\n        \"variablesIds\":[\n            \"56b571010bac431e91cd7f5bd9abef7c\",\n            \"ca0c7878698e4885a09782f02516ab35\"\n        ]\n}\n```\n\n",
        "category": "DataService",
        "in": [
            {
                "x": 100,
                "y": 340,
                "wires": [
                    {
                        "id": "f64d0811e72a5d32"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 580,
                "wires": [
                    {
                        "id": "1e90d1846fd550eb",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "readVariablesNames",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-tags",
                    "label": {
                        "en-US": "Variables Names"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "DataServiceReadVariables",
            "version": "0.0.2",
            "desc": "Subflow that implements all the APIs needed to Read variables data from DataService Edge App",
            "keywords": "dataservice, variables, read",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 1120,
            "y": 520,
            "wires": [
                {
                    "id": "fc41b543821343df",
                    "port": 0
                },
                {
                    "id": "1e90d1846fd550eb",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "abc5035a37790f6e",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Create Token Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/TokenManagerService/oauth/token\";\n\n//set body\nmsg.payload = {\n    \"appName\": \"edgeappdataservice\",\n    \"appVersion\": \"1.1\",\n    \"hostTenant\": \"edge\",\n    \"userTenant\": \"edge\"\n    };\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\n// set auth header\nlet authStr = flow.get(\"dataserviceReadUser\") + \":\" + flow.get(\"dataserviceReadPass\");\nlet basicOut = Buffer.from(authStr).toString('base64');\nmsg.headers['X-SPACE-AUTH-KEY'] = 'Basic ' + basicOut;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 140,
        "wires": [
            [
                "0d3fc59067917e1a"
            ]
        ]
    },
    {
        "id": "0d3fc59067917e1a",
        "type": "http request",
        "z": "38742bb91ad9d5fc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 140,
        "wires": [
            [
                "df074c753dcd2565"
            ]
        ]
    },
    {
        "id": "8e1c0ad053c512be",
        "type": "inject",
        "z": "38742bb91ad9d5fc",
        "name": "At Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "3af489deced21476"
            ]
        ]
    },
    {
        "id": "df074c753dcd2565",
        "type": "change",
        "z": "38742bb91ad9d5fc",
        "name": "set accessToken",
        "rules": [
            {
                "t": "set",
                "p": "readAccessToken",
                "pt": "flow",
                "to": "payload.access_token",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 140,
        "wires": [
            [
                "0bd4c145ad009f30"
            ]
        ]
    },
    {
        "id": "c118ea59aee9d8b1",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Create Data Request",
        "func": "// init msg\nlet outMsg = {\"headers\": {}};\n\n// set method\noutMsg.method = \"GET\";\n\n// get parameters for data query\n//from like '2021-10-10T10:00:00.000Z';\n//to like'2021-10-10T11:00:00.000Z';\nconst from = new Date(msg.from);\nconst to = new Date(msg.to);\n\n// set baseRoute\noutMsg.baseRoute = msg.baseRoute;\nlet route = msg.baseRoute + \"&from=\" + from.toISOString();\nroute += \"&to=\"   + to.toISOString();\nroute += \"&order=Ascending\";\n//set url\noutMsg.url = route;\n\n// set token header\noutMsg.headers[\"authorization\"] = flow.get(\"readAccessToken\");\n\n// set variablesmap in message\noutMsg.variablesNames = msg.variablesNames;\noutMsg.variablesIds = msg.variablesIds;\n\nif(msg.dataBuffer == \"\")\n{\n    flow.set(\"readStartTime\", new Date().getTime());\n    outMsg.dataBuffer = {};\n    \n    for(i = 0; i < msg.variablesIds.length; i++){\n        outMsg.dataBuffer[msg.variablesIds[i]]  = []; \n    }\n}\nelse\n{\n    outMsg.dataBuffer = msg.dataBuffer;\n}\n\n\nreturn outMsg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 420,
        "wires": [
            [
                "4cbbd503ba076bf1"
            ]
        ]
    },
    {
        "id": "4cbbd503ba076bf1",
        "type": "http request",
        "z": "38742bb91ad9d5fc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 830,
        "y": 420,
        "wires": [
            [
                "1e90d1846fd550eb"
            ]
        ]
    },
    {
        "id": "601fc2a7dd9e12ca",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Create Var Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/DataService/Variables\";\n\n// set token header\nmsg.headers[\"authorization\"] = flow.get(\"readAccessToken\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 260,
        "wires": [
            [
                "22d89b89cdc156cb"
            ]
        ]
    },
    {
        "id": "22d89b89cdc156cb",
        "type": "http request",
        "z": "38742bb91ad9d5fc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "fc41b543821343df"
            ]
        ]
    },
    {
        "id": "fc41b543821343df",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Set variablesMap",
        "func": "// create out message\nlet outMsg = {\"payload\": {\n      \"fill\": \"red\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected but no variables configured.\"\n}};\n\n// get names of variables in input to be extracted from Data Service app\nlet varName = env.get(\"readVariablesNames\");\nlet varNameArray = varName.split(\",\");\n\n// get the assets map\nlet assetsMap = flow.get(\"readAssetsMap\");\n\n// init variables Map\nlet variablesMap = {};\n\n// iterate through variables in dataservice\nfor(let i = 0; i < msg.payload.variables.length; i++){\n    // create variable name as assetName.variableName\n    let varName = assetsMap[msg.payload.variables[i].assetId] + \".\" + msg.payload.variables[i].variableName;\n\n    // search for varName in input variables\n    if(varNameArray.indexOf(varName) != -1)\n    {\n        // set variables map as varName : varId\n        variablesMap[varName] = msg.payload.variables[i].variableId;\n    }\n}\n\n\nif (Object.keys(variablesMap).length > 0) {\n    flow.set(\"readVariablesMap\", variablesMap);\n    // set status\n    outMsg.payload = {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected and Configured for reading \" + Object.keys(variablesMap).length + \" variables.\"\n    };\n}\nelse\n{\n    flow.set(\"readVariablesMap\", null);\n}\n\n\nreturn outMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0bd4c145ad009f30",
        "type": "switch",
        "z": "38742bb91ad9d5fc",
        "name": "accessToken?",
        "property": "readAccessToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "2c94fc857dac2dd2"
            ]
        ]
    },
    {
        "id": "f64d0811e72a5d32",
        "type": "switch",
        "z": "38742bb91ad9d5fc",
        "name": "accessToken?",
        "property": "readAccessToken",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 340,
        "wires": [
            [
                "f710f89cb930c459"
            ]
        ]
    },
    {
        "id": "f710f89cb930c459",
        "type": "switch",
        "z": "38742bb91ad9d5fc",
        "name": "variablesMap?",
        "property": "readVariablesMap",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 380,
        "wires": [
            [
                "6989400a31aef7a2"
            ]
        ]
    },
    {
        "id": "ff7e0f820e489bec",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Create User",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/TokenManagerService/users\";\n\nlet user = flow.get(\"dataserviceReadUser\");\nlet password = flow.get(\"dataserviceReadPass\");\n\n//set body\nmsg.payload = {\n      userName: user,\n      passWord: password,\n      familyName: \"myFamily\" + user,\n      givenName: user,\n      email: user + \"@myemail.com\",\n      roles: [\n        {\n          application: \"edgeappdataservice\",\n          role: \"admin\"\n        }]};\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "dde55f9ad647d193"
            ]
        ]
    },
    {
        "id": "dde55f9ad647d193",
        "type": "http request",
        "z": "38742bb91ad9d5fc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 80,
        "wires": [
            [
                "abc5035a37790f6e"
            ]
        ]
    },
    {
        "id": "6989400a31aef7a2",
        "type": "switch",
        "z": "38742bb91ad9d5fc",
        "name": "dateFromPicked?",
        "property": "from",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 420,
        "wires": [
            [
                "90de0f1e385ed490"
            ]
        ]
    },
    {
        "id": "90de0f1e385ed490",
        "type": "switch",
        "z": "38742bb91ad9d5fc",
        "name": "dateToPicked?",
        "property": "to",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 460,
        "wires": [
            [
                "0459b588c752ed44"
            ]
        ]
    },
    {
        "id": "3af489deced21476",
        "type": "change",
        "z": "38742bb91ad9d5fc",
        "name": "url, user, pass",
        "rules": [
            {
                "t": "set",
                "p": "dataserviceReadUrl",
                "pt": "flow",
                "to": "http://edgeappdataservice:4203",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dataserviceReadUser",
                "pt": "flow",
                "to": "nodeReadUser",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dataserviceReadPass",
                "pt": "flow",
                "to": "nodeReadPass",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 80,
        "wires": [
            [
                "ff7e0f820e489bec"
            ]
        ]
    },
    {
        "id": "2c94fc857dac2dd2",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Create Asset Request",
        "func": "// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceReadUrl\") + \"/AssetService/Assets\";\n\n// set token header\nmsg.headers[\"authorization\"] = flow.get(\"readAccessToken\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 200,
        "wires": [
            [
                "963417999d6e9b8e"
            ]
        ]
    },
    {
        "id": "963417999d6e9b8e",
        "type": "http request",
        "z": "38742bb91ad9d5fc",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 770,
        "y": 200,
        "wires": [
            [
                "b4e5f96e77ed5063"
            ]
        ]
    },
    {
        "id": "b4e5f96e77ed5063",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Set assetsMap",
        "func": "// init assets list\nlet assetsMap = {};\n\nfor(i=0; i < msg.payload.assets.length; i++){\n    // for each asset set a key:value property as id:name\n    assetsMap[msg.payload.assets[i].assetId] = msg.payload.assets[i].name;\n}\n\n// set assets list as flow tag\nflow.set(\"readAssetsMap\", assetsMap);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 200,
        "wires": [
            [
                "601fc2a7dd9e12ca"
            ]
        ]
    },
    {
        "id": "0459b588c752ed44",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Init Request",
        "func": "\n\n// init variablesNames and Ids\nconst variablesMap = flow.get(\"readVariablesMap\");\nmsg.variablesNames = Object.keys(variablesMap);\nmsg.variablesIds = Object.values(variablesMap);\n\n// init databuffer\nmsg.dataBuffer = \"\";\n\n// init baseRoute\nmsg.baseRoute = flow.get(\"dataserviceReadUrl\") +\n                \"/DataService/Data?variableIds=[\\\"\" \n                + msg.variablesIds.join(\"\\\",\\\"\") + \"\\\"]\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 340,
        "wires": [
            [
                "c118ea59aee9d8b1"
            ]
        ]
    },
    {
        "id": "1e90d1846fd550eb",
        "type": "function",
        "z": "38742bb91ad9d5fc",
        "name": "Recursive Data Extraction",
        "func": "\n// loop over data received from dataservice\nfor(i=0; i<msg.payload.data.length; i++){\n    let varData = msg.payload.data[i];\n    // concatenate actual databuffer with new data \n    msg.dataBuffer[varData.variableId] = msg.dataBuffer[varData.variableId].concat(varData.values);\n}\n\n// check if some data are still to be queried\nif (msg.payload.hasOwnProperty(\"hasMoreData\")) {\n    // create out for next query\n    let out = {\n        \"baseRoute\": msg.baseRoute,\n        \"from\": msg.payload.hasMoreData.from,\n        \"to\": msg.payload.hasMoreData.to,\n        \"dataBuffer\": msg.dataBuffer,\n        \"variablesNames\": msg.variablesNames,\n        \"variablesIds\": msg.variablesIds\n    };\n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Querying data in progress...\"\n    }};\n    \n    return [out, status, null];\n    \n}\nelse {\n    // change ids with names before sending databuffer \n    let newDataBuffer = {};\n    let numPoints = 0;\n    for(let i = 0; i < msg.variablesIds.length; i++)\n    {\n        newDataBuffer[msg.variablesNames[i]] = msg.dataBuffer[msg.variablesIds[i]];\n        numPoints += msg.dataBuffer[msg.variablesIds[i]].length\n    }\n    \n    // create final out\n    let out = {\n        \"payload\": newDataBuffer,\n        \"queryTime\": new Date().getTime() - flow.get(\"readStartTime\"),\n        \"variablesNames\": msg.variablesNames,\n        \"variablesIds\": msg.variablesIds\n    };\n    // create status message\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": new Date().toISOString() + \n                \"- Read \" + numPoints +\n                \" values from \" + msg.variablesIds.length +\n                \" variables in \" + out.queryTime/1000 + \"s.\"\n    }};\n\n    return [null, status, out]\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 520,
        "wires": [
            [
                "c118ea59aee9d8b1"
            ],
            [],
            []
        ]
    },
    {
        "id": "052b59772af28f30",
        "type": "tab",
        "label": "Read Write DataService Subflows Example",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "73fa0f1f23932639",
        "type": "inject",
        "z": "052b59772af28f30",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "8f7ca4689cac1957"
            ]
        ]
    },
    {
        "id": "8f7ca4689cac1957",
        "type": "function",
        "z": "052b59772af28f30",
        "name": "create metadata",
        "func": "// define metadata for one device named \"mydevice\" with 2 tags \"CH1\" and \"CH2\"\nmsg.payload = {\n    \"seq\": 1,\n    \"connections\": [\n        {\n            \"name\": \"mydevice\",\n            \"type\": \"S7\",\n            \"dataPoints\": [\n                {\n                    \"name\": \"default\",\n                    \"topic\": \"ie/d/myadapter/dp/mydevice/default\",\n                    \"publishType\": \"bulk\",\n                    \"dataPointDefinitions\": [\n                        {\n                            \"name\": \"CH1\",\n                            \"id\": \"101\",\n                            \"dataType\": \"Int\",\n                        },\n                        {\n                            \"name\": \"CH2\",\n                            \"id\": \"102\",\n                            \"dataType\": \"Int\",\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "9696595f3bd2fb20",
                "33c9ccdbc74a19e7"
            ]
        ]
    },
    {
        "id": "9696595f3bd2fb20",
        "type": "mqtt out",
        "z": "052b59772af28f30",
        "name": "",
        "topic": "ie/m/myadapter/dp",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f694ecfa.70c7c",
        "x": 570,
        "y": 160,
        "wires": []
    },
    {
        "id": "33c9ccdbc74a19e7",
        "type": "debug",
        "z": "052b59772af28f30",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 220,
        "wires": []
    },
    {
        "id": "55bd603d970df078",
        "type": "inject",
        "z": "052b59772af28f30",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "a3274a46f7013d71"
            ]
        ]
    },
    {
        "id": "b0401991bbfc8882",
        "type": "debug",
        "z": "052b59772af28f30",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 600,
        "wires": []
    },
    {
        "id": "a3274a46f7013d71",
        "type": "function",
        "z": "052b59772af28f30",
        "name": "time range",
        "func": "// get actual date\nlet d = new Date();\n// set to as now\nmsg.to = d.toISOString();\n// set from as 3 hours ago\nmsg.from = new Date(d.getTime() - 3*3600*1000).toISOString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 600,
        "wires": [
            [
                "11cf80b7daf0db54"
            ]
        ]
    },
    {
        "id": "11cf80b7daf0db54",
        "type": "subflow:38742bb91ad9d5fc",
        "z": "052b59772af28f30",
        "name": "",
        "env": [
            {
                "name": "readVariablesNames",
                "value": "MyDevice.CH1,MyDevice.CH2",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 600,
        "wires": [
            [
                "b0401991bbfc8882"
            ]
        ]
    },
    {
        "id": "1f410e1fef88a607",
        "type": "subflow:a3aef14032aa8402",
        "z": "052b59772af28f30",
        "name": "",
        "env": [
            {
                "name": "writeVariablesNames",
                "value": "MyDevice.CH1,MyDevice.CH2",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 380,
        "wires": [
            [
                "bf3a64bce183d9cf"
            ]
        ]
    },
    {
        "id": "68c22d36f1e0de6a",
        "type": "function",
        "z": "052b59772af28f30",
        "name": "create data",
        "func": "// simulate data payload\n\n// function to get random integers between a min and a max\nfunction getRandomIntBetween(min, max){\n    return parseInt(Math.random()*(max-min+1)+min);\n}\n\n// THE NUMBER OF TAGS FOR EACH VARIABLE TO BE CREATED\nlet tagsNum = 10000;\n// THE NAMES OF THE TAGS TO BE WRITTEN\nlet varNames = [\"MyDevice.CH1\", \"MyDevice.CH2\"];\n\n\n// create a timestamp with ms precision\nlet d = new Date();\nlet epoch = d.getTime();\n// init payload\nmsg.payload = [];\n\n// for each configured variable\nfor (let i = 0; i < varNames.length; i++)\n{\n    // init values\n    let values = [];\n    // based on number of tags\n    for (let j = tagsNum; j>= 0; j--)\n    {\n        // push data from the oldest to the newest\n        let ts1 = new Date(epoch - (1000*j)).toISOString();\n        values.push({\n                \"qualitycode\": 192,\n                \"timestamp\": ts1,\n                \"value\": getRandomIntBetween(100,150),\n            });\n    }\n    // set values for the actual variable\n    msg.payload.push({\n        \"variableName\": varNames[i],\n        \"values\": values\n    })\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 380,
        "wires": [
            [
                "f857a154cbd23c4e",
                "1f410e1fef88a607"
            ]
        ]
    },
    {
        "id": "5459a9ed889ed603",
        "type": "inject",
        "z": "052b59772af28f30",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "68c22d36f1e0de6a"
            ]
        ]
    },
    {
        "id": "bf3a64bce183d9cf",
        "type": "debug",
        "z": "052b59772af28f30",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 380,
        "wires": []
    },
    {
        "id": "f857a154cbd23c4e",
        "type": "debug",
        "z": "052b59772af28f30",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 440,
        "wires": []
    },
    {
        "id": "fb367e6cb64a3e44",
        "type": "comment",
        "z": "052b59772af28f30",
        "name": "Create Metadata for Device \"MyDevice\" with 2 variables \"CH1\" and \"CH2\" in the Custom Adapter \"MyAdapter\"",
        "info": "",
        "x": 430,
        "y": 100,
        "wires": []
    },
    {
        "id": "e2c51c9234c43b22",
        "type": "comment",
        "z": "052b59772af28f30",
        "name": "Read Simulated 10800 points for each variable \"CH1\" and \"CH2\" specifying a time range of 3 hours in \"from\" and \"to\" msg properties",
        "info": "",
        "x": 500,
        "y": 540,
        "wires": []
    },
    {
        "id": "68f69f0b99aa0a51",
        "type": "comment",
        "z": "052b59772af28f30",
        "name": "Simulate and Write 10800 points for each variable \"CH1\" and \"CH2\" with 1 second cycletime (total 3 hours of data) ",
        "info": "",
        "x": 440,
        "y": 320,
        "wires": []
    },
    {
        "id": "f694ecfa.70c7c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "ie-databus",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    }
]